<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Workday集成指南</title>
    <link href="/2024/11/06/Workday%E9%9B%86%E6%88%90%E6%8C%87%E5%8D%97/"/>
    <url>/2024/11/06/Workday%E9%9B%86%E6%88%90%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Workday集成指南"><a href="#Workday集成指南" class="headerlink" title="Workday集成指南"></a>Workday集成指南</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期因为项目需要，需要学习探索Workday系统的集成相关知识，因此有了此文。在此之前，对于Workday的了解仅限于它是全球最大的云HCM解决方案供应商之一，也是我司的供应商之一。对它的接触也仅限于入职阶段上传过一些必须资料而已。因此，此文更多的是基于自己的理解和实践，记录了探索Workday集成的一些过程和心得。</p><h2 id="Workday集成概述"><a href="#Workday集成概述" class="headerlink" title="Workday集成概述"></a>Workday集成概述</h2><h3 id="集成类型总览"><a href="#集成类型总览" class="headerlink" title="集成类型总览"></a>集成类型总览</h3><p>Workday提供了多种集成方式，主要可以分为以下几类：</p><h4 id="1-Inbound-Integration（数据导入）"><a href="#1-Inbound-Integration（数据导入）" class="headerlink" title="1. Inbound Integration（数据导入）"></a>1. Inbound Integration（数据导入）</h4><p>将外部数据导入Workday，如批量导入员工数据、更新组织结构等。主要通过EIB或Web Service实现，需要严格的数据验证。</p><h4 id="2-Outbound-Integration（数据导出）"><a href="#2-Outbound-Integration（数据导出）" class="headerlink" title="2. Outbound Integration（数据导出）"></a>2. Outbound Integration（数据导出）</h4><p>从Workday导出数据到外部系统，常用于员工信息同步、财务数据导出等。可以使用RaaS（Report as a Service）实现，支持灵活的数据格式和过滤条件。</p><h4 id="3-Real-time-Integration（实时集成）"><a href="#3-Real-time-Integration（实时集成）" class="headerlink" title="3. Real-time Integration（实时集成）"></a>3. Real-time Integration（实时集成）</h4><p>通过Web Service或REST API实现系统间的实时数据交换，适用于员工状态同步、实时审批等场景。需要考虑性能和系统可用性。</p><h4 id="4-Scheduled-Integration（定时集成）"><a href="#4-Scheduled-Integration（定时集成）" class="headerlink" title="4. Scheduled Integration（定时集成）"></a>4. Scheduled Integration（定时集成）</h4><p>按计划执行的定期集成任务，适合处理大量数据，如每日数据同步、定期报表生成等。资源消耗可控，维护成本较低。此类型集成可以在外部系统执行定时任务实现，也可以在Workday中通过Integration System实现。Integration System目前正处于探索阶段。</p><h4 id="5-Event-driven-Integration（事件驱动）"><a href="#5-Event-driven-Integration（事件驱动）" class="headerlink" title="5. Event-driven Integration（事件驱动）"></a>5. Event-driven Integration（事件驱动）</h4><p>基于特定业务事件触发的集成，如员工入职&#x2F;离职处理、组织变更通知等。支持复杂业务流程，需要配置事件订阅。与定时集成一样可以通过Integration System实现，目前正在探索阶段。</p><h3 id="本文内容概要"><a href="#本文内容概要" class="headerlink" title="本文内容概要"></a>本文内容概要</h3><p>本文将重点介绍Inbound Integration和Outbound Integration两种集成方式。主要内容包括：</p><ul><li><p>Workday核心组件介绍</p><ul><li>Security Group</li><li>Integration System User</li><li>API Client</li><li>Report</li></ul></li><li><p>集成任务实践</p><ul><li>Report as a Service集成</li><li>Web Service集成</li></ul></li></ul><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><h3 id="Security-Group"><a href="#Security-Group" class="headerlink" title="Security Group"></a>Security Group</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Security Group（安全组）是Workday中权限管理的核心组件，它是一个用户集合，用于管理对Workday租户中可保护项目的访问权限。通过安全组，管理员可以集中管理和分配用户权限，实现对系统资源的精确控制。</p><h4 id="功能和用途"><a href="#功能和用途" class="headerlink" title="功能和用途"></a>功能和用途</h4><p>安全组在Workday系统中主要提供以下功能：</p><ol><li><p><strong>权限集中管理</strong></p><ul><li>统一管理用户和角色的权限</li><li>支持批量分配和撤销权限</li><li>可以包含用户、角色和其他安全组</li></ul></li><li><p><strong>访问控制</strong></p><ul><li>控制对业务对象的访问权限</li><li>管理功能和操作的使用权限</li><li>限制数据查看和修改范围</li></ul></li><li><p><strong>系统集成授权</strong></p><ul><li>为集成系统提供必要的访问权限</li><li>控制外部系统的接口调用权限</li><li>管理API和Web Service的访问范围</li></ul></li></ol><h4 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h4><p>使用下列Task在Workday创建Security Group</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Create Security Group<br></code></pre></td></tr></table></figure><p>因为在我们的场景中，Security Group 需要用于集成，因此选择类型为<em><strong>Integration System Security Group (Unconstrained)<em><strong>，安全组名称按需求填写即可，如下图所示：<br><img src="https://s2.loli.net/2024/11/05/97XMjGViYdvoJhS.png" alt="alt text"><br>信息填写完毕后，点击</strong></em>OK</strong></em>按钮即可。<br>完成上述步骤后，便拥有了一个用于进行集成任务的Security Group名为<em><strong>Tianle_ISSG</strong></em>。</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ol><li>Security Group Concepts: <a href="https://doc.workday.com/admin-guide/en-us/authentication-and-security/configurable-security/security-group-basics/dan1370797393239.html">https://doc.workday.com/admin-guide/en-us/authentication-and-security/configurable-security/security-group-basics/dan1370797393239.html</a></li><li>Security Group Types: <a href="https://doc.workday.com/admin-guide/en-us/authentication-and-security/configurable-security/security-group-basics/gyz1563919157019.html?toc=2.1.6">https://doc.workday.com/admin-guide/en-us/authentication-and-security/configurable-security/security-group-basics/gyz1563919157019.html?toc=2.1.6</a></li></ol><h3 id="Integration-System-User"><a href="#Integration-System-User" class="headerlink" title="Integration System User"></a>Integration System User</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>Integration System User (ISU) 是Workday中专门用于系统集成的特殊用户类型。与普通用户不同，ISU主要用于系统间的自动化交互，而不是人工操作。ISU在Workday集成架构中扮演着重要角色，它作为连接Workday与外部系统的桥梁，确保系统间的安全通信。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>ISU主要应用于以下场景：</p><ol><li>Web Service集成（包括但不限于REST、SOAP、XML等）</li><li>Enterprise Interface Builder (EIB)导入&#x2F;导出</li><li>报表自服务</li><li>数据同步、数据处理</li></ol><h4 id="创建步骤-1"><a href="#创建步骤-1" class="headerlink" title="创建步骤"></a>创建步骤</h4><ol><li><p>使用下列Task在Workday创建Security Group：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Create Integration System User<br></code></pre></td></tr></table></figure></li><li><p>填写基本信息：</p><ul><li>用户名: 遵循命名规范</li><li>密码: 符合安全策略</li></ul></li></ol><p><img src="https://s2.loli.net/2024/11/05/G7ZMBQ2IhtpJmWe.png" alt="alt text"></p><p>信息填写完毕后，点击<em><strong>OK</strong></em>按钮即可。</p><p>完成上述步骤后，便拥有了一个用于进行集成任务的ISU名为<em><strong>ISU_Tianle</strong></em>。</p><h3 id="API-Client"><a href="#API-Client" class="headerlink" title="API Client"></a>API Client</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>API Client是Workday中用于管理和控制API访问的重要组件。它作为应用程序与Workday API之间的接口，负责处理认证和授权。API Client通过JWT (JSON Web Token)等机制确保API调用的安全性。</p><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><p>API Client主要应用于以下场景：</p><ol><li>外部应用程序访问Workday API</li><li>系统集成开发</li><li>自动化流程实现</li><li>数据同步与交换</li></ol><h4 id="创建步骤-2"><a href="#创建步骤-2" class="headerlink" title="创建步骤"></a>创建步骤</h4><ol><li>使用下列Task在Workday创建API Client：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Create API Client<br></code></pre></td></tr></table></figure></li><li>填写基本信息：<ul><li>客户端名称: 遵循命名规范</li><li>认证方式: 选择JWT Bearer Grant</li><li>X509证书: 上传生成的public_cert.pem文件(详见下方Notes)</li><li>允许集成消息: 勾选</li><li>授予管理员同意: 勾选</li><li>Scope(Fucntion Areas): 选择必要的Fuction Area(<strong>Tenant Non-Configurable</strong>是必选项)<br><img src="https://s2.loli.net/2024/11/05/F1frpYM8XHoTA3m.png" alt="alt text"></li></ul></li></ol><p>Notes(Important):</p><ol><li>在创建API Client时，需要生成一个x509证书，生成方法如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl req -x509 -newkey rsa:2048 -keyout private_key.pem -out public_cert.pem -days 365<br>openssl rsa -in private_key.pem -pubout -out public_key.pem<br>openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in private_key.pem -out private_key_pkcs8.pem <br></code></pre></td></tr></table></figure></li><li>生成证书后，将public_cert.pem的值填入Workday中。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat public_cert.pem<br></code></pre></td></tr></table></figure></li></ol><p>信息填写完毕后，点击<em><strong>OK</strong></em>按钮即可。</p><p>完成上述步骤后，便拥有了一个用于进行集成任务的API Client名为<em><strong>Tianle_Client</strong></em>。</p><h4 id="参考文档-1"><a href="#参考文档-1" class="headerlink" title="参考文档"></a>参考文档</h4><p>API Client Registration: <a href="https://doc.workday.com/admin-guide/en-us/authentication-and-security/authentication/oauth/dan1370797831458.html">https://doc.workday.com/admin-guide/en-us/authentication-and-security/authentication/oauth/dan1370797831458.html</a></p><h3 id="Report"><a href="#Report" class="headerlink" title="Report"></a>Report</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Report是Workday平台中的核心功能之一，它提供了强大的数据处理和报表生成能力。通过Report，用户可以将分散的数据整合成有价值的数据集合，为决策提供数据支持。它不仅支持基础的数据提取功能，还能够处理复杂的业务场景，包括但不限于：</p><ul><li>自定义报表设计：支持灵活的字段选择</li><li>多数据源整合：可以从多个数据源中提取和关联数据</li><li>高级计算功能：支持复杂的数据计算和统计分析(Calculated Fields)</li><li>动态参数配置：允许用户设置动态过滤条件</li><li>格式化输出：支持多种输出格式，如Excel、PDF等</li><li>Web Service集成：可作为数据服务供其他系统调用</li></ul><p>作为Workday平台中不可或缺的数据管理工具，Report为企业提供了全方位的数据可视化和分析能力。<br>Report主要应用于以下业务场景：</p><ol><li>数据分析和报表生成</li><li>系统集成数据源</li><li>业务监控和决策支持</li><li>合规性报告生成</li></ol><h4 id="创建步骤-3"><a href="#创建步骤-3" class="headerlink" title="创建步骤"></a>创建步骤</h4><ol><li>使用下列Task在Workday创建Report：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Create Custom Report<br></code></pre></td></tr></table></figure></li><li>填写基本信息：<ul><li>报表名称: 遵循命名规范</li><li>报表类型: 选择Advanced</li><li>启用Web Service: 勾选</li><li>优化性能: 勾选<br><img src="https://s2.loli.net/2024/11/05/7CaRJFxusoABMLN.png" alt="alt text"></li></ul></li></ol><p>信息填写完毕后，点击<em><strong>OK</strong></em>按钮即可。</p><p>完成上述步骤后，便拥有了一个用于进行集成任务的Report名为<em><strong>Tianle_Test_Report</strong></em>。</p><h2 id="集成任务场景"><a href="#集成任务场景" class="headerlink" title="集成任务场景"></a>集成任务场景</h2><h3 id="Report-as-a-Service-RaaS-集成"><a href="#Report-as-a-Service-RaaS-集成" class="headerlink" title="Report as a Service(RaaS)集成"></a>Report as a Service(RaaS)集成</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>Report as a Service(RaaS)是Workday提供的一项重要集成服务，允许通过API调用获取报表数据。</p><h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h4><ol><li>已创建Integration System User (<em><strong>ISU_Tianle</strong></em>)</li><li>已配置API Client(<em><strong>Tianle_Client</strong></em>)</li><li>已创建自定义报表并启用Web Service功能(<em><strong>Tianle_Test_Report</strong></em>)</li><li>创建集成任务所需的Security Group(<em><strong>Tianle_ISSG</strong></em>)</li></ol><h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h4><ol><li>配置Report的报表内容</li></ol><p><img src="https://s2.loli.net/2024/11/05/C3FoGlXN6spSZdQ.png" alt="alt text"></p><ol start="2"><li>确定Report中字段所需的Domain policy(以Employee Type为例)</li></ol><p>点击<em><strong>Employee Type</strong></em>段，在弹出的窗口中点击<em><strong>See in New type</strong></em><br><img src="https://s2.loli.net/2024/11/05/SpFyXtHevEn67oO.png" alt="alt text"></p><p>点击下图中的<em><strong>View security</strong></em>按钮<br><img src="https://s2.loli.net/2024/11/05/8DPRt3aHoZucnfU.png" alt="alt text"></p><p>下图表格中的<em><strong>Domain Security</strong></em>即为Employee Type字段所需的Domain policy<br><img src="https://s2.loli.net/2024/11/05/JqXRlWehympj9Po.png" alt="alt text"></p><ol start="3"><li>授予Security Group相关资源的访问权限</li></ol><p>在完成第二步之后可以得到，Tianle_Test_Report所包含的三个字段Employee ID、Employee Type、Employee Name，他们分别对应的Domain policy都包含<em><strong>Worker Data: Current Staffing Information</strong></em>，因此需要将<em><strong>Tianle_ISSG</strong></em>授予<em><strong>Worker Data: Current Staffing Information</strong></em>的权限。</p><p>运行下列Task在Workday中授予<em><strong>Tianle_ISSG</strong></em>对<em><strong>Worker Data: Current Staffing Information</strong></em>的权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Maintain Permissions for Security Group<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/05/MND2Wkh8BclLnpd.png" alt="alt text"></p><p><img src="https://s2.loli.net/2024/11/05/lZnc8hSMBJrkO4u.png" alt="alt text"></p><p>遵循权限最小原则，仅授予<em><strong>Tianle_ISSG</strong></em>对<em><strong>Worker Data: Current Staffing Information</strong></em>的View only权限。</p><p>Important Notes:<br>设置完成后需要执行<em><strong>Activate Pending Security Policy Changes</strong></em>任务，激活安全策略变更。</p><ol start="4"><li>添加ISU到Security Group</li></ol><p>运行下列Task在Workday中将<em><strong>ISU_Tianle</strong></em>添加到<em><strong>Tianle_ISSG</strong></em>中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Edit Security Group<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/05/aUfKJlAkBnEd71p.png" alt="alt text"></p><p>在<em><strong>Integration System Users</strong></em>中添加<em><strong>ISU_Tianle</strong></em>即可。</p><ol start="5"><li>分享Report给ISU或对应的Security Group</li></ol><p>此处示例选择将<em><strong>Tianle_Test_Report</strong></em>分享给<em><strong>ISU_Tianle</strong></em>。<br><img src="https://s2.loli.net/2024/11/05/IoBNtbyHSXG7dkE.png" alt="alt text"></p><h4 id="使用API调用Report"><a href="#使用API调用Report" class="headerlink" title="使用API调用Report"></a>使用API调用Report</h4><ol><li>使用脚本获取JWT签名</li></ol><p>已经编写好了相关的脚本用于生成签名后的JWT，在此不做展示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">由于JWT的签名过程需要使用私钥，这个过程不能直接在curl中完成。你需要先通过其他工具（如OpenSSL或专门的JWT库）生成签名后的JWT，然后再将其用于curl命令中。</span><br>JWT=&quot;eyJhbG...已签名的JWT令牌&quot;<br></code></pre></td></tr></table></figure><ol start="2"><li>获取AccessToken</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">然后使用JWT获取access token</span><br>curl -X POST &quot;https://wd3-impl-services1.workday.com/ccx/oauth2/thoughtworks3/token&quot; \<br>  -H &quot;Content-Type: application/x-www-form-urlencoded&quot; \<br>  --data-urlencode &quot;grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&quot; \<br>  --data-urlencode &quot;assertion=$JWT&quot;<br></code></pre></td></tr></table></figure><ol start="3"><li>调用API</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">ACCESS_TOKEN=&quot;Bearer eyJhbG...已获取的AccessToken&quot;<br>curl --request GET \<br>  --url &#x27;https://wd3-impl-services1.workday.com/ccx/service/customreport2/thoughtworks3/ISU_Tianle/Tianle_Test_Report?format=json&#x27; \<br>  --header &#x27;Authorization: $ACCESS_TOKEN&#x27; \<br>  --header &#x27;Content-Type: application/x-www-form-urlencoded&#x27; \<br>  --header &#x27;Cookie: TS012df9cf=010c505f0326e0d12675c372bdf463de84ec70e924ba431e80693628c766f8b8f81be1756c984a9637fc382c6502cae61156756dbc&#x27; \<br>  --header &#x27;User-Agent: insomnia/10.0.0&#x27; \<br>  --cookie TS012df9cf=010c505f03d906dfd1ca57ca907890d4afb487ad4ade09b1a4f6e0790fec225cdda4c0832fd11870ab4a99d950ede8ed5573bcd3a6 \<br></code></pre></td></tr></table></figure><ol start="4"><li>获取数据</li></ol><p>返回体如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;Report_Entry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;Employee_Type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Regular&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;Employee_ID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;100xx&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;Worker&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Employee&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;Employee_Type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Regular&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;Employee_ID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;100xx&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;Worker&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Employee&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;Employee_ID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;13xxx&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;Worker&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Contingent Worker&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h4><ol><li>报表类型必须为Advanced才能启用Web Service功能</li><li>API Client需要具有相应的Function Area权限</li><li>建议启用”Optimized for Performance”以提升性能</li><li>定期检查报表访问权限设置</li></ol><h3 id="Web-Service集成"><a href="#Web-Service集成" class="headerlink" title="Web Service集成"></a>Web Service集成</h3><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><p>Web Service集成是Workday提供的一种标准化接口服务，允许外部系统通过HTTP&#x2F;HTTPS协议与Workday进行数据交互，操作访问Workday中的数据。Workday支持多种Web Service类型，包括：</p><ol><li><p><strong>REST Web Services</strong></p><ul><li>基于REST架构风格</li><li>使用JSON数据格式</li><li>支持标准HTTP方法（GET、POST、PUT、DELETE等）</li></ul></li><li><p><strong>SOAP Web Services</strong></p><ul><li>基于SOAP协议</li><li>使用XML数据格式</li><li>提供WSDL接口描述</li></ul></li></ol><p>以下段落来自于Workday官方文档:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Workday REST APIs exist alongside our public SOAP-based web services. For transferring large sets of data, use the SOAP web services. SOAP web services best support batch transactions for external enterprise applications.<br></code></pre></td></tr></table></figure><p>Workday官方文档中提到，REST API与SOAP API并存，对于批量数据传输，建议使用SOAP API。并且在Workday中，SOAP API提供的资源访问更佳丰富，因此在本文中，主要示例为SOAP API。</p><p>Notes: SOAP API可能并不常见，如果有兴趣的同学可以参考以下文档，可以简单地了解：<a href="https://blog.postman.com/soap-api-definition/%EF%BC%8C%E5%9C%A8%E6%AD%A4%E4%B8%8D%E5%81%9A%E8%B5%98%E8%BF%B0%E3%80%82">https://blog.postman.com/soap-api-definition/，在此不做赘述。</a></p><h4 id="前提条件-1"><a href="#前提条件-1" class="headerlink" title="前提条件"></a>前提条件</h4><ol><li>已创建Integration System User (<em><strong>ISU_Tianle</strong></em>)</li><li>已配置API Client(<em><strong>Tianle_Client</strong></em>)</li><li>创建集成任务所需的Security Group(<em><strong>Tianle_ISSG</strong></em>)</li></ol><h4 id="认证方式"><a href="#认证方式" class="headerlink" title="认证方式"></a>认证方式</h4><p>Workday Web Service支持以下认证方式：</p><ol><li><p><strong>基本认证</strong></p><ul><li>使用用户名和密码</li><li>适用于简单集成场景</li><li>安全性相对较低</li></ul></li><li><p><strong>OAuth 2.0</strong></p><ul><li>支持JWT授权流程</li><li>提供更高的安全性</li><li>支持访问令牌刷新</li></ul></li></ol><p>在此基于前文我们对于API Client的介绍，我们选择OAuth 2.0认证方式。</p><h4 id="配置步骤-1"><a href="#配置步骤-1" class="headerlink" title="配置步骤"></a>配置步骤</h4><p>在此我们选择Get_Employee_Reviews作为示例, API文档:<a href="https://community.workday.com/sites/default/files/file-hosting/productionapi/Performance_Management/v43.0/Get_Employee_Reviews.html%E3%80%82">https://community.workday.com/sites/default/files/file-hosting/productionapi/Performance_Management/v43.0/Get_Employee_Reviews.html。</a></p><ol><li>确定API所需Security Policy</li></ol><p>使用以下任务来确定API所需的策略：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">View Security for Securable Item<br></code></pre></td></tr></table></figure><p>输入API名称，例如<em><strong>Get Employee Reviews</strong></em>，点击<em><strong>OK</strong></em>按钮，如下图所示：<br><img src="https://s2.loli.net/2024/11/05/NElhaTFKXWSy5DH.png" alt="alt text"></p><p>点击<em><strong>View Security</strong></em>按钮，如下图所示：<br><img src="https://s2.loli.net/2024/11/05/kMmQWdIZbAgKVnL.png" alt="alt text"></p><p>由上图可知，<em><strong>Get Employee Reviews</strong></em>所需的Security Policy为<em><strong>Set Up: Employee Reviews</strong></em>，此Policy对应的Function Area为<em><strong>Performance Enablement</strong></em>。</p><ol start="2"><li>启用API所需Function Area</li></ol><p>使用以下任务来启用API所需的Function Area：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Maintain Functional Areas<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/05/MOdt87N4Ggcjpf9.png" alt="alt text"></p><p>如图所示我们需要勾选<em><strong>Performance Enablement</strong></em>的Enabled勾选框，并点击<em><strong>OK</strong></em>按钮。</p><p>如此便成功开启了<em><strong>Performance Enablement</strong></em> Function Area。</p><ol start="3"><li>启用API所需Security Policy</li></ol><p>如下图所示方式可以开启相关的Security Policy。下图中为Disabled状态，是因为此Policy已经开启。<br><img src="https://s2.loli.net/2024/11/05/4XLEuaK5nOdVvqs.png" alt="alt text"></p><ol start="4"><li>授予Security Group相关资源的Security Policy</li></ol><p>在此处需要为<em><strong>Tianle_ISSG</strong></em>授予<em><strong>Set Up: Employee Reviews</strong></em>权限。</p><p>使用以下任务来授予<em><strong>Tianle_ISSG</strong></em>对<em><strong>Set Up: Employee Reviews</strong></em>的权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Maintain Permissions for Security Group<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/05/IhDWtlmeo9CuNyc.png" alt="alt text"></p><p><img src="https://s2.loli.net/2024/11/05/6kDVWdtxsZI72gf.png" alt="alt text"></p><p>此处遵循权限最小原则，仅授予<em><strong>Tianle_ISSG</strong></em>对<em><strong>Set Up: Employee Reviews</strong></em>的Get only权限。</p><p>Important Notes:<br>设置完成后需要执行<em><strong>Activate Pending Security Policy Changes</strong></em>任务，激活安全策略变更。</p><ol start="5"><li>为Security Group添加相关的Scope</li></ol><p>因为<em><strong>Get Employee Reviews</strong></em>需要使用<em><strong>Performance Enablement</strong></em> Function Area，因此需要将<em><strong>Tianle_ISSG</strong></em>添加到<em><strong>Performance Enablement</strong></em>中。</p><p>使用以下任务来将<em><strong>Tianle_ISSG</strong></em>添加到<em><strong>Performance Enablement</strong></em>中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Edit Security Group<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/05/7i93jmUSGIBDTky.png" alt="alt text"></p><p>Important Notes:<br>在进行WWS集成时，要为Security Group加相关的Scope，否则会导致API调用失败。</p><h3 id="调用API"><a href="#调用API" class="headerlink" title="调用API"></a>调用API</h3><ol><li>生成AccessToken与前文相同，在此不做赘述。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ACCESS_TOKEN=&quot;Bearer eyJhbG...已获取的AccessToken&quot;<br></code></pre></td></tr></table></figure><ol start="2"><li>调用API<br>url格式为：{Workday Instance URL}&#x2F;ccx&#x2F;service&#x2F;{Integration System ID}&#x2F;{Function Area}&#x2F;v{API Version}</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --request POST \<br>  --url https://wd3-impl-services1.workday.com/ccx/service/thoughtworks3/Performance_Management/v42.2 \<br>  --header &#x27;Authorization: $ACCESS_TOKEN&#x27; \<br>  --header &#x27;Content-Type: application/xml&#x27; \<br>  --header &#x27;User-Agent: insomnium/0.2.3&#x27; \<br>  --cookie TS012df9cf=010c505f03a660422d1a3ca204022bd286f06ca49f25ed1f9782f40cd27a7b2ba49b0cc50a0197d8a0be87ee7d8031f58ab398b13e \<br>  --data &#x27;&lt;env:Envelope xmlns:env=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:bsvc=&quot;urn:com.workday/bsvc&quot;&gt;<br>    &lt;env:Header&gt;<br>        &lt;bsvc:Workday_Common_Header&gt;<br>        &lt;/bsvc:Workday_Common_Header&gt;<br>    &lt;/env:Header&gt;<br>    &lt;env:Body&gt;<br>        &lt;bsvc:Get_Employee_Reviews_Request bsvc:version=&quot;v42.2&quot;&gt;<br>            &lt;bsvc:Response_Filter&gt;<br>                &lt;bsvc:Page&gt;1&lt;/bsvc:Page&gt;<br>                &lt;bsvc:Count&gt;1&lt;/bsvc:Count&gt;<br>            &lt;/bsvc:Response_Filter&gt;<br>        &lt;/bsvc:Get_Employee_Reviews_Request&gt;<br>    &lt;/env:Body&gt;<br>&lt;/env:Envelope&gt;&#x27;<br></code></pre></td></tr></table></figure><ol start="3"><li>获取数据</li></ol><p>返回体如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">env:Envelope</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:env</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">env:Body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Get_Employee_Reviews_Response</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:wd</span>=<span class="hljs-string">&quot;urn:com.workday/bsvc&quot;</span> <span class="hljs-attr">wd:version</span>=<span class="hljs-string">&quot;v42.2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Response_Filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Page</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Page</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Count</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Count</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Response_Filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Response_Results</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Total_Results</span>&gt;</span>940<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Total_Results</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Total_Pages</span>&gt;</span>940<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Total_Pages</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Page_Results</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Page_Results</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Page</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Page</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Response_Results</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Response_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Employee_Review</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Employee_Review_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>23ea88d95b091001e5275926c2710000<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Employee_Review_ID&quot;</span>&gt;</span>PERFORMANCE_REVIEW-6-1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Employee_Review_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Employee_Review_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Employee_Review_ID</span>&gt;</span>PERFORMANCE_REVIEW-6-1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Employee_Review_ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Review_Completed</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Review_Completed</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Worker_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>59b22876019e01c0df7954e8db11c439<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Employee_ID&quot;</span>&gt;</span>24214<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Worker_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>59b22876019e01c0df7954e8db11c439<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Employee_ID&quot;</span>&gt;</span>24214<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>ee0323053a5e01998b2627e0a8601cc1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Employee_ID&quot;</span>&gt;</span>15179<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Employee_Review_Template_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>c5d881f6c5761001e00cf06d11720000<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Employee_Review_Template_ID&quot;</span>&gt;</span>EMPLOYEE_REVIEW_TEMPLATE-6-1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Employee_Review_Template_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Review_Initiation_Date</span>&gt;</span>2024-10-11T00:52:00.000-07:00<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Review_Initiation_Date</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Review_Period_Start_Date</span>&gt;</span>2024-01-01<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Review_Period_Start_Date</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Review_Period_End_Date</span>&gt;</span>2024-12-31<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Review_Period_End_Date</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Goals_Review_Section_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Review_Goal_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Goal</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>p&gt;Test Goal<span class="hljs-symbol">&amp;lt;</span>/p&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Goal</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Description</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>p&gt;Test Goal<span class="hljs-symbol">&amp;lt;</span>/p&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Description</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Category_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>e9fe5102f4c71001ea0952a413880001<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Goal_Category_ID&quot;</span>&gt;</span>GOAL_CATEGORY-6-3<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Category_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Category_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>e9fe5102f4c71001ea0952a413880000<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Goal_Category_ID&quot;</span>&gt;</span>GOAL_CATEGORY-6-2<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Category_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>ee0323053a5e01998b2627e0a8601cc1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Employee_ID&quot;</span>&gt;</span>15179<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Goal_Base_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>c5d881f6c5761001ed30f8f5190e0000<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Goal_Reference_ID&quot;</span>&gt;</span>GOAL-6-1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Goal_Base_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Goal_Archived</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Goal_Archived</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Review_Goal_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Section_Type_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>0605537220004d30b6a78dc862bd7c9c<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Section_Type_ID&quot;</span>&gt;</span>GOALS<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Section_Type_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Goals_Review_Section_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Questions_Review_Section_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Review_Question_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Question_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>c5d881f6c5761001e12a371d75ae0000<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Question_ID&quot;</span>&gt;</span>QUESTION-6-1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Question_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>ee0323053a5e01998b2627e0a8601cc1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Employee_ID&quot;</span>&gt;</span>15179<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Review_Question_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Manager_Section_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Review_Rating_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>c5d881f6c5761001e0e8cdb80ce80000<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Review_Rating_ID&quot;</span>&gt;</span>REVIEW_RATING-6-2<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Review_Rating_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Manager_Section_Comment</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>p&gt;Go ahead<span class="hljs-symbol">&amp;lt;</span>/p&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Manager_Section_Comment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Manager_Section_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Employee_Section_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Review_Rating_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>c5d881f6c5761001e0e8cdb80ce80000<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Review_Rating_ID&quot;</span>&gt;</span>REVIEW_RATING-6-2<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Review_Rating_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Employee_Section_Comment</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>p&gt;Blah blah blah<span class="hljs-symbol">&amp;lt;</span>/p&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Employee_Section_Comment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Employee_Section_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Section_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>ee0323053a5e01998b2627e0a8601cc1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Employee_ID&quot;</span>&gt;</span>15179<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Section_Comment</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>p&gt;Looks good for promotion<span class="hljs-symbol">&amp;lt;</span>/p&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Section_Comment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Section_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Section_Type_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>ae80836cfc75460683ea7d5e80003cc0<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Section_Type_ID&quot;</span>&gt;</span>QUESTIONS<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Section_Type_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Questions_Review_Section_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Supporting_Document_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Section_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>ee0323053a5e01998b2627e0a8601cc1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Employee_ID&quot;</span>&gt;</span>15179<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Section_Comment</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>p&gt;Looks good<span class="hljs-symbol">&amp;lt;</span>/p&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Section_Comment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Section_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Section_Type_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>496973d1e0d0406aa7966e1b9015a825<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Section_Type_ID&quot;</span>&gt;</span>SUPPORTING-DOCUMENTS<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Section_Type_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Supporting_Document_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Overall_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Manager_Overall_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Performance_Evaluation_Rating_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>c5d881f6c5761001e1e1e83d4d940000<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Review_Rating_ID&quot;</span>&gt;</span>REVIEW_RATING-6-3<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Performance_Evaluation_Rating_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Manager_Comment</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>p&gt;<span class="hljs-symbol">&amp;lt;</span>i&gt;Blah blah good job<span class="hljs-symbol">&amp;lt;</span>/i&gt;<span class="hljs-symbol">&amp;lt;</span>/p&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Manager_Comment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Manager_Overall_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Employee_Overall_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Performance_Evaluation_Rating_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>c5d881f6c5761001e1e1e83d4d940001<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Review_Rating_ID&quot;</span>&gt;</span>REVIEW_RATING-6-4<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Performance_Evaluation_Rating_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Employee_Comment</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>p&gt;Blah Blah assessment sum<span class="hljs-symbol">&amp;lt;</span>/p&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Employee_Comment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Employee_Overall_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Overall_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>ee0323053a5e01998b2627e0a8601cc1<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Employee_ID&quot;</span>&gt;</span>15179<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Additional_Manager_Comment</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>p&gt;Additional manager overall summary<span class="hljs-symbol">&amp;lt;</span>/p&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Comment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Additional_Manager_Overall_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:Section_Type_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;WID&quot;</span>&gt;</span>d35755e188d94b1c82f19a0418253bd6<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wd:ID</span> <span class="hljs-attr">wd:type</span>=<span class="hljs-string">&quot;Section_Type_ID&quot;</span>&gt;</span>OVERALL<span class="hljs-tag">&lt;/<span class="hljs-name">wd:ID</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Section_Type_Reference</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Overall_Evaluation_Data</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Employee_Review_Data</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Employee_Review</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Response_Data</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wd:Get_Employee_Reviews_Response</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">env:Body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">env:Envelope</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="参考文档-2"><a href="#参考文档-2" class="headerlink" title="参考文档"></a>参考文档</h4><p>Soap API Derectionary: <a href="https://community.workday.com/sites/default/files/file-hosting/productionapi/versions/index.html">https://community.workday.com/sites/default/files/file-hosting/productionapi/versions/index.html</a><br>Rest API Derectionary: <a href="https://community.workday.com/sites/default/files/file-hosting/restapi/index.html">https://community.workday.com/sites/default/files/file-hosting/restapi/index.html</a></p><h2 id="总结与思考"><a href="#总结与思考" class="headerlink" title="总结与思考"></a>总结与思考</h2><h3 id="集成要点总结"><a href="#集成要点总结" class="headerlink" title="集成要点总结"></a>集成要点总结</h3><p>通过对Workday集成的学习和实践，以下几个关键点值得注意：</p><ol><li><p><strong>权限管理至关重要</strong></p><ul><li>Security Group是权限管理的核心</li><li>遵循最小权限原则</li><li>权限变更需要及时激活</li></ul></li><li><p><strong>认证机制的选择</strong></p><ul><li>OAuth 2.0 + JWT是推荐的认证方式</li><li>需要妥善保管证书和密钥</li><li>定期更新认证信息</li></ul></li><li><p><strong>集成方式的选择</strong></p><ul><li>根据业务场景选择合适的集成方式</li><li>RaaS适合需要自定义数据查询的场景</li><li>Web Service适合复杂业务操作</li></ul></li></ol><p>掌握了本文中提到的两种集成方式，已经足以解决部分的集成问题。希望这篇文章能够帮助到同样需要进行Workday集成的同事。如果有任何问题，欢迎交流讨论。</p><h3 id="实践经验"><a href="#实践经验" class="headerlink" title="实践经验"></a>实践经验</h3><p>在探索过程中，我们总结了以下一些实践经验，分享给大家：</p><ul><li>由于缺乏明确的官方学习路径和清晰的文档指引，学习曲线较为陡峭。在探索过程中需要投入大量时间和精力进行试错，并且要尽可能的通过实际操作进行验证。</li><li>Workday官方文档内容时有欠缺，建议在搜索资料时善用AI工具辅助，这样可以提高知识整合的效率。</li><li>推荐使用Workday Community平台，虽然上面的内容相对简略，但包含了大量实践经验分享，是很好的参考资料。</li><li>Workday的集成任务通常需要多个步骤协同配合才能完成，因此在操作过程中需要保持耐心和细心。</li></ul><h3 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h3><p>Workday作为一个功能丰富且庞大的系统，要想真正掌握其集成能力并非易事。虽然通过自学和实践可以解决一些基础问题，但要深入了解这个领域，系统性的培训和课程学习一定是必不可少的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>生产者消费者模型-线程池</title>
    <link href="/2022/10/12/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B-%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2022/10/12/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<p>线程池在内部实际上构建了一个生产者消费者模型，将线程和任务两者解耦，并不直接关联，从而良好的缓冲任务，复用线程。线程池的运行主要分成两部分：任务管理、线程管理。任务管理部分充当生产者的角色，当任务提交后，线程池会判断该任务后续的流转：<br>（1）直接申请线程执行该任务；<br>（2）缓冲到队列中等待线程执行；<br>（3）拒绝该任务。线程管理部分是消费者，它们被统一维护在线程池内，根据任务请求进行线程的分配，当线程执行完任务后则会继续获取新的任务去执行，最终当线程获取不到任务的时候，线程就会被回收。<br><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/ThreadPoolExecutorWork.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Reactor(反应堆)/Dispatcher(适配器)模式</title>
    <link href="/2022/10/12/Reactor-%E5%8F%8D%E5%BA%94%E5%A0%86-Dispatcher-%E5%88%86%E5%8F%91%E8%80%85-%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/10/12/Reactor-%E5%8F%8D%E5%BA%94%E5%A0%86-Dispatcher-%E5%88%86%E5%8F%91%E8%80%85-%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="传统阻塞IO服务模型"><a href="#传统阻塞IO服务模型" class="headerlink" title="传统阻塞IO服务模型"></a>传统阻塞IO服务模型</h2><p><strong>模型特点</strong><br><a href="https://imgse.com/i/xNkPit"><img src="https://s1.ax1x.com/2022/10/11/xNkPit.md.png" alt="xNkPit.md.png"></a></p><ul><li>采用阻塞IO模型获取输入的数据</li><li>每个链接都由一个独立的线程服务，处理其IO操作</li></ul><p><strong>存在的问题</strong>  </p><ul><li>当并发数较高时，会在一时间创建大量的线程，会占用大量的系统资源，同时线程的创建和关闭也会造成系统资源的损耗</li><li>当链接创建后，如果线程没有数据可以进行read操作，那么线程就会阻塞，浪费线程资源</li></ul><h2 id="Reactor模式"><a href="#Reactor模式" class="headerlink" title="Reactor模式"></a>Reactor模式</h2><p>针对于传统IO服务模型的两大缺点，先驱者们提出了一个解决方案，分别是以下两点  </p><ul><li>多个链接共用一个阻塞的对象，也就是Reactor，当没有新数据需要进行read处理时，只阻塞Reactor这一个线程，当接收到新数据后，Reactor线程不再阻塞，接收数据后，再分发给处理线程进行数据处理</li><li>基于线程池复用线程资源，不再为每个链接单独的创建线程，而是将业务处理的任务交付给线程池进行处理，具体哪条线程执行任务由线程池决定，一条线程可以处理多个链接上的任务</li></ul><h3 id="总体设计理念"><a href="#总体设计理念" class="headerlink" title="总体设计理念"></a>总体设计理念</h3><p><a href="https://imgse.com/i/xNkiJP"><img src="https://s1.ax1x.com/2022/10/11/xNkiJP.md.png" alt="xNkiJP.md.png"></a><br><strong>核心组成</strong>  </p><ul><li>Reactor:Reactor由一个单独的线程运行，主要负责监听和分发事件，不进行具体的业务处理，即上图的EventDispatch</li><li>Handler:负责处理具体的业务逻辑IO操作，即上图的EventHandler</li></ul><h3 id="单Reactor单线程"><a href="#单Reactor单线程" class="headerlink" title="单Reactor单线程"></a>单Reactor单线程</h3><p><a href="https://imgse.com/i/xNk8QU"><img src="https://s1.ax1x.com/2022/10/11/xNk8QU.png" alt="xNk8QU.png"></a>  </p><ul><li>如果是建立连接请求事件，则由 Acceptor 通过 Accept 处理连接请求，然后创建一个 Handler 对象处理连接完成后的后续业务处理</li><li>如果不是建立连接事件，则 Reactor 会分发调用连接对应的 Handler 来响应 ,Handler 会完成 Read→业务处理→Send 的完整业务流程</li></ul><p><strong>缺点</strong></p><ul><li>性能问题，只有一个线程，无法完全发挥多核 CPU 的性能。Handler 在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈</li><li>可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息</li></ul><h3 id="单Reactor多线程"><a href="#单Reactor多线程" class="headerlink" title="单Reactor多线程"></a>单Reactor多线程</h3><p><a href="https://imgse.com/i/xNEGVJ"><img src="https://s1.ax1x.com/2022/10/11/xNEGVJ.png" alt="xNEGVJ.png"></a><br><strong>优点</strong> </p><ul><li>可以充分的利用多核cpu 的处理能力</li></ul><p><strong>缺点</strong> </p><ul><li>多线程数据共享和访问比较复杂， reactor 处理所有的事件的监听和响应，在单线程运行， 在高并发场景容易出现性能瓶颈.</li></ul><h3 id="主从Reactor模型-Netty采用此模型"><a href="#主从Reactor模型-Netty采用此模型" class="headerlink" title="主从Reactor模型(Netty采用此模型)"></a>主从Reactor模型(Netty采用此模型)</h3><p><a href="https://imgse.com/i/xNmJOK"><img src="https://s1.ax1x.com/2022/10/11/xNmJOK.png" alt="xNmJOK.png"></a><br><strong>优点</strong>  </p><ul><li>职责明确,父线程只负责接收请求，业务逻辑全部交由子线程处理</li><li>充分利用多核CPU的性能，利用了线程池的思想复用线程资源，避免了线程创建销毁而造成的资源额外开销</li><li>引入了流水线的工作模式，业务逻辑顺序变得清晰</li><li>MainReactor因为可以将处理连接请求的任务交付给一个EventLoopGroup处理，不再是一个阻塞的单线程，这就解决了单Reactor多线程模式下，Reactor只有单线程而造成的性能瓶颈问题，从而真正可以应付高并发的场景</li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反应堆/适配器模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程池参数动态配置及告警组件</title>
    <link href="/2022/10/10/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%82%E6%95%B0%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%91%8A%E8%AD%A6%E7%BB%84%E4%BB%B6/"/>
    <url>/2022/10/10/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%82%E6%95%B0%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%91%8A%E8%AD%A6%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p><strong>Git Repository:</strong> <a href="https://github.com/bakazhou/ThreadBakazhou">https://github.com/bakazhou/ThreadBakazhou</a><br><strong>线程池相关Blog:</strong>  <a href="https://bakazhou.github.io/2022/09/27/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/">https://bakazhou.github.io/2022/09/27/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>beach阶段阅读了一篇来自美团技术团队的文章《<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html">Java线程池实现原理及其在美团业务中的实践</a>》,在这篇文章的结尾处提到了在美团在现有的业务中实现了一个线程池参数的动态配置以及监控告警的组件，这点引起了我的兴趣，于是开始着手简单实现了一个具有基本功能的可视化组件，期间的过程很有趣也遇到了许多问题，希望大家在看完本文后可以指出错误，非常感谢～  </p><h2 id="功能构想"><a href="#功能构想" class="headerlink" title="功能构想"></a>功能构想</h2><p>1.用户可以通过注解的形式对于指定的服务进行线程池的注册。<br>2.用户可以通过配置文件对线程池进行基本的配置。<br>3.用户可以通过前端页面对线程池参数进行动态的修改，例如核心线程数，最大线程数，拒绝策略等，且可以直观的了解当前已注册的线程池以及其运行情况。<br>4.当线程池中的线程活跃度达到了用户所设定的阈值后，可以通过企业微信的机器人接收到详细的告警信息，并通知相关业务负责人。<br>5.当线程池出现了拒绝任务的情况时，同样使相关业务负责人接收到告警信息。</p><h2 id="技术选择"><a href="#技术选择" class="headerlink" title="技术选择"></a>技术选择</h2><p>back-end: Springboot,Forest(负责发送http请求,作为告警通知的工具),Guava(用于创建ThreadFactory)<br>front-end: Vue,Element-ui,Axios</p><h2 id="业务场景-如有巧合-纯属雷同"><a href="#业务场景-如有巧合-纯属雷同" class="headerlink" title="业务场景(如有巧合 纯属雷同)"></a>业务场景(如有巧合 纯属雷同)</h2><p>假设有一批旅客与新冠感染者产生了时空交集，那么在检测到后，我们需要通过这一批旅客的手机号查找其住址信息，通知所在的居委会，期间需调用运营商提供的sdk，消耗时间较长。如果按照传统的单线程处理此任务，那么任务流程就是依次处理任务，只有当前一个任务完成后，才会执行下一个任务，效率非常低，因此我们可以使用多线程的方式来处理这个问题，使任务同时执行。</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h3 id="happy-path"><a href="#happy-path" class="headerlink" title="happy path"></a>happy path</h3><h4 id="单线程-线程池中只有一条活跃线程处理任务"><a href="#单线程-线程池中只有一条活跃线程处理任务" class="headerlink" title="单线程(线程池中只有一条活跃线程处理任务)"></a>单线程(线程池中只有一条活跃线程处理任务)</h4><p>前端服务与后端服务分别运行成功后，可以看到前端页面如图所示，从中可以看到当前UserService服务的线程池的基本信息，例如服务名称，核心线程数等。<br><img src="https://s1.ax1x.com/2022/10/09/xJgUs0.png"><br>通过postman对后端接口<strong>users</strong>发起get请求，目的是根据手机号查找旅客信息<br><a href="https://imgse.com/i/xJgoJH"><img src="https://s1.ax1x.com/2022/10/09/xJgoJH.png" alt="xJgoJH.png"></a><br>点击send请求发送后，成功接收到来自后端的返回消息，但耗时较长。<br><a href="https://imgse.com/i/xJRF9H"><img src="https://s1.ax1x.com/2022/10/09/xJRF9H.png" alt="xJRF9H.png"></a><br>从控制台中的日志信息可以看到，本次请求总共耗时3s，此处很容易理解，因为我们假设查找一条用户详情所需要的时间为0.01s，而users接口一次会查询256个用户，接近三秒钟。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">INFO <span class="hljs-number">4081</span> --- [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">5</span>] c.c.t.g.b.back.service.UserService       : waste total time:3s<br></code></pre></td></tr></table></figure><p>同时如下图所示，当请求发送后，用户可以点击前端页面中的实时详情的按钮查看当前任务的运行情况。<br><a href="https://imgse.com/i/xJRCND"><img src="https://s1.ax1x.com/2022/10/09/xJRCND.png" alt="xJRCND.png"></a></p><h4 id="多线程-线程池中有多条线程处理任务"><a href="#多线程-线程池中有多条线程处理任务" class="headerlink" title="多线程(线程池中有多条线程处理任务)"></a>多线程(线程池中有多条线程处理任务)</h4><p>从上面的演示中可以看到，如果只有一条线程处理任务，那么效率是比较低的，因此可以在前端页面中点击编辑按钮，点击后会出现如下界面。<br><a href="https://imgse.com/i/xJWgQs"><img src="https://s1.ax1x.com/2022/10/09/xJWgQs.png" alt="xJWgQs.png"></a><br>在此界面中，用户只能通过获取最佳参数的按钮来修改核心线程数以及最大线程数，目的是为了防止用户的异常输入而造成线程池的崩溃，最佳参数的计算逻辑如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ThreadCoreParametersInfoPo <span class="hljs-title function_">getCorePoolSizeAndMaximumPoolSize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//availableProcessors为jvm虚拟机可用核心数，核心线程数是availableProcessors，最大线程数是availableProcessors*2</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">availableProcessors</span> <span class="hljs-operator">=</span> Runtime.getRuntime().availableProcessors();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadCoreParametersInfoPo</span>(availableProcessors*<span class="hljs-number">10</span>,availableProcessors*<span class="hljs-number">20</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://imgse.com/i/xJfxun"><img src="https://s1.ax1x.com/2022/10/09/xJfxun.png" alt="xJfxun.png"></a><br>最佳参数获取且修改成功后<br><a href="https://imgse.com/i/xJh9EV"><img src="https://s1.ax1x.com/2022/10/09/xJh9EV.png" alt="xJh9EV.png"></a><br>此时再次通过postman对后端接口<strong>users</strong>发起get请求，仅仅耗时0s，日志信息如下所示。<br><a href="https://imgse.com/i/xJRF9H"><img src="https://s1.ax1x.com/2022/10/09/xJRF9H.png" alt="xJRF9H.png"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">INFO <span class="hljs-number">4081</span> --- [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">7</span>] c.c.t.g.b.back.service.UserService       : waste total time:0s<br></code></pre></td></tr></table></figure><h3 id="sad-path"><a href="#sad-path" class="headerlink" title="sad path"></a>sad path</h3><h4 id="任务进行中修改线程池参数"><a href="#任务进行中修改线程池参数" class="headerlink" title="任务进行中修改线程池参数"></a>任务进行中修改线程池参数</h4><p>如果在线程池中有剩余任务未完成的情况下修改线程池参数，后端会拒绝此次的修改请求，并返回如下错误信息。<br><a href="https://imgse.com/i/xJRB8J"><img src="https://s1.ax1x.com/2022/10/09/xJRB8J.png" alt="xJRB8J.png"></a></p><h4 id="活跃度告警"><a href="#活跃度告警" class="headerlink" title="活跃度告警"></a>活跃度告警</h4><p>当线程池的活跃度已经达到用户所设置的阈值后，后端服务会通过配置的企业微信机器人发出对应的告警信息,包括服务名，以及线程池的详细信息，如下所示，**线程活跃度的计算逻辑为(当前活跃线程数&#x2F;最大可用配置线程)**。<br><a href="https://imgse.com/i/xJ42yd"><img src="https://s1.ax1x.com/2022/10/09/xJ42yd.png" alt="xJ42yd.png"></a></p><h4 id="任务拒绝异常告警"><a href="#任务拒绝异常告警" class="headerlink" title="任务拒绝异常告警"></a>任务拒绝异常告警</h4><p>当线程池已经无法接收新任务并执行拒绝策略后，后端服务会监测到异常，并通过配置的企业微信机器人发出对应的告警信息，包括出现异常的服务以及拒绝的任务数量，如下所示。<br><a href="https://imgse.com/i/xJhxRe"><img src="https://s1.ax1x.com/2022/10/09/xJhxRe.png" alt="xJhxRe.png"></a></p><h2 id="期间遇到的问题"><a href="#期间遇到的问题" class="headerlink" title="期间遇到的问题"></a>期间遇到的问题</h2><h3 id="怎么对线程池进行注册以及发现？"><a href="#怎么对线程池进行注册以及发现？" class="headerlink" title="怎么对线程池进行注册以及发现？"></a>怎么对线程池进行注册以及发现？</h3><p>通过注解，本项目中实现了两个注解，分别是@RegistryServiceScan以及@Registry，这两个注解实现了当springboot启动时，会扫描RegistryServiceScan指定包下的文件，如果有包含@Registry注解的类，就会根据类名在线程池注册中心里进行注册，如此含有Registry注解的类，就有了与之类名对应的线程池为其服务。  </p><h3 id="怎么实现微信机器人的告警通知？"><a href="#怎么实现微信机器人的告警通知？" class="headerlink" title="怎么实现微信机器人的告警通知？"></a>怎么实现微信机器人的告警通知？</h3><p>1.通过企业微信创建一个群聊，并在群聊中创建一个机器人，流程如下，并最终得到一个机器人以及其webhook的地址。<br><a href="https://imgse.com/i/xJL8Fs"><img src="https://s1.ax1x.com/2022/10/09/xJL8Fs.jpg" alt="xJL8Fs.jpg"></a><br><a href="https://imgse.com/i/xJLGYn"><img src="https://s1.ax1x.com/2022/10/09/xJLGYn.jpg" alt="xJLGYn.jpg"></a><br><a href="https://imgse.com/i/xJLtS0"><img src="https://s1.ax1x.com/2022/10/09/xJLtS0.jpg" alt="xJLtS0.jpg"></a><br>2.通过Forest，向机器人的webhook地址发送http请求，并携带对应的信息，便可以完成告警。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文可以看出线程池的强大，在日常coding中灵活的使用线程池可以极大的提高代码的性能，非常值得深入学习一番，在此不对具体的代码实现加以赘述，如果大家感兴趣的可以浏览项目的<a href="https://github.com/bakazhou/ThreadBakazhou">repository</a>，这个项目目前只完成了最初预想中的基本功能，但我会维护下去，不断拓展，如果大家有什么问题或是有什么建议，欢迎发私信交流～</p>]]></content>
    
    
    
    <tags>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java线程池</title>
    <link href="/2022/09/27/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2022/09/27/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="线程池简介"><a href="#线程池简介" class="headerlink" title="线程池简介"></a>线程池简介</h2><p>线程池（Thread Pool）是一种基于池化思想管理线程的工具，经常出现在多线程服务器中，如MySQL。<br>线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。  </p><ul><li>降低资源消耗：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。</li><li>提高响应速度：任务到达时，无需等待线程创建即可立即执行。</li><li>线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。</li><li>线程池具备可拓展性，允许开发人员向其中增加更多的功能。</li></ul><h2 id="CachedThreadPool"><a href="#CachedThreadPool" class="headerlink" title="CachedThreadPool"></a>CachedThreadPool</h2><h3 id="基本案例"><a href="#基本案例" class="headerlink" title="基本案例"></a>基本案例</h3><p>以下案例主要验证缓存线程池的工作流程，可以注意一下最下面一条线程执行的线程id，与上面打印的其中一条线程id一致，这与CachedThreadPool的工作原理有关，后面会讲到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CachedThreadPoolUsage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">cachedThreadPool</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br>        Set&lt;Long&gt; threadSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            cachedThreadPool.execute(() -&gt; &#123;<br>                <span class="hljs-keyword">synchronized</span> (lock)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;Current thread id:&quot;</span>+Thread.currentThread().getId());<br>                    threadSet.add(Thread.currentThread().getId());<br>                    System.out.println(<span class="hljs-string">&quot;Current thread name:&quot;</span>+Thread.currentThread().getName());<br>                    System.out.println();<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        Thread.sleep(<span class="hljs-number">5000</span>);<br>        cachedThreadPool.execute(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Current thread is from cachedThreadPool：&quot;</span>+threadSet.contains(Thread.currentThread().getId()));<br>            System.out.println(<span class="hljs-string">&quot;Current thread id:&quot;</span>+Thread.currentThread().getId());<br>            System.out.println(<span class="hljs-string">&quot;Current thread name:&quot;</span>+Thread.currentThread().getName());<br>            System.out.println();<br>        &#125;);<br><br>        cachedThreadPool.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Current thread id:<span class="hljs-number">12</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span><br><br>Current thread id:<span class="hljs-number">16</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">5</span><br><br>Current thread id:<span class="hljs-number">13</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span><br><br>Current thread id:<span class="hljs-number">15</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span><br><br>Current thread id:<span class="hljs-number">14</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span><br><br>Current thread is from cachedThreadPool：<span class="hljs-literal">true</span><br>Current thread id:<span class="hljs-number">14</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="实现源码"><a href="#实现源码" class="headerlink" title="实现源码"></a>实现源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newCachedThreadPool</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">0</span>, Integer.MAX_VALUE,<br>                                  <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;Runnable&gt;());<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newCachedThreadPool</span><span class="hljs-params">(ThreadFactory threadFactory)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">0</span>, Integer.MAX_VALUE,<br>                                  <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;Runnable&gt;(),<br>                                  threadFactory);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="池模型"><a href="#池模型" class="headerlink" title="池模型"></a>池模型</h3><p><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/CachedThreadPool.png"></p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>如池模型图中所示，在CachedThreadPool内部维护了一个SynchronousQueue用于管理任务，当第一个事件提交到线程池中时，因为池中没有可以调用的线程，所以会创建出一个新的线程thread1为task1服务，同时如果第二个task2进行了事件提交，但是thread1还在服务于task1，那么就会再次启动一个新线程thread2服务于task2，task3亦是如此，若task3事件耗时较短，thread3空闲了出来，在60s的最长空闲时间过后，thread3会被销毁,在这60s内，如果有新事件交付给线程池，那么新事件便由thread3执行。<br><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/cached.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从工作流程可以看出，CachedThreadPool只适合处理<strong>大量短生命周期的异步事件</strong>，因为在其接收到事件时会即时进行处理，而不会阻塞，但是因为SynchronousQueue是无数量限制的任务队列，当用同一时间大量事件并发时，会产生性能压力的问题，占用大量的系统资源，当提交处理的任务不应该等待并且需要在提交后立即处理时，CachedThreadPool很有用。</p><h2 id="FixedThreadPool"><a href="#FixedThreadPool" class="headerlink" title="FixedThreadPool"></a>FixedThreadPool</h2><h3 id="基本案例-1"><a href="#基本案例-1" class="headerlink" title="基本案例"></a>基本案例</h3><p>以下案例主要验证了固定大小的线程池的工作流程，设置线程池的最大线程数量3，即三条线程为此线程池服务，可以注意输出的线程池大小，以及每条服务的线程id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FixedThreadPoolUsage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">fixedThreadPool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        Set&lt;Long&gt; threadSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>            fixedThreadPool.execute(() -&gt; &#123;<br>                <span class="hljs-keyword">synchronized</span> (lock)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;Current thread id:&quot;</span>+Thread.currentThread().getId());<br>                    threadSet.add(Thread.currentThread().getId());<br>                    System.out.println(<span class="hljs-string">&quot;Current thread name:&quot;</span>+Thread.currentThread().getName());<br>                    System.out.println();<br>                &#125;<br>            &#125;);<br>        &#125;<br>        Thread.sleep(<span class="hljs-number">3000</span>);<br>        System.out.println(<span class="hljs-string">&quot;Thread pool size is:&quot;</span>+threadSet.size());<br>        System.out.println();<br>        fixedThreadPool.execute(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Current thread is from cachedThreadPool：&quot;</span>+threadSet.contains(Thread.currentThread().getId()));<br>            System.out.println(<span class="hljs-string">&quot;Current thread id:&quot;</span>+Thread.currentThread().getId());<br>            System.out.println(<span class="hljs-string">&quot;Current thread name:&quot;</span>+Thread.currentThread().getName());<br>            System.out.println();<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">Current thread id:<span class="hljs-number">12</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span><br><br>Current thread id:<span class="hljs-number">13</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span><br><br>Current thread id:<span class="hljs-number">14</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span><br><br>Current thread id:<span class="hljs-number">14</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span><br><br>Current thread id:<span class="hljs-number">13</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span><br><br>Current thread id:<span class="hljs-number">12</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span><br><br>Thread pool size is:<span class="hljs-number">3</span><br><br>Current thread is from cachedThreadPool：<span class="hljs-literal">true</span><br>Current thread id:<span class="hljs-number">14</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="实现源码-1"><a href="#实现源码-1" class="headerlink" title="实现源码"></a>实现源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> nThreads)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(nThreads, nThreads,<br>                                  <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> nThreads, ThreadFactory threadFactory)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(nThreads, nThreads,<span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),threadFactory);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="池模型-1"><a href="#池模型-1" class="headerlink" title="池模型"></a>池模型</h3><p><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/FixedThreadPool.png"></p><h3 id="工作流程-1"><a href="#工作流程-1" class="headerlink" title="工作流程"></a>工作流程</h3><p>FixedThreadPool会复用固定数量的线程处理一个共享的无边界队列。最多有nThreads个线程会处于活动状态执行任务。如果当所有线程都是活动时，有多的任务被提交过来，那么它会一致在队列中等待直到有线程可用。如果任何线程在执行过程中因为错误而中止，新的线程会替代它的位置来执行后续的任务。所有线程都会一直存于线程池中，直到执行ExecutorService.shutdown()关闭线程池。<br><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/fixed.png"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>从工作流程可以看出，FixedThreadPool适用于处理<strong>少量短生命周期的异步事件</strong>，首先是因为当事件较多且线程池中线程最大数量较小时，较多的线程会被阻塞，效率较低，其次如果线程已经全部处于工作中，且每个线程中的任务所需的处理时间都比较长，那么新的事件就需要等待很长时间，才能被处理，严重影响服务性能。</p><h2 id="SingleThreadPool"><a href="#SingleThreadPool" class="headerlink" title="SingleThreadPool"></a>SingleThreadPool</h2><h3 id="基本案例-2"><a href="#基本案例-2" class="headerlink" title="基本案例"></a>基本案例</h3><p>以下案例主要验证了SingleThreadPool的单例模式，线程池的线程数量是否为1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleThreadPoolUsage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">singleThreadExecutor</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>        Set&lt;Long&gt; threadSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            singleThreadExecutor.execute(() -&gt; &#123;<br>                <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Current thread id:&quot;</span> + Thread.currentThread().getId());<br>                    threadSet.add(Thread.currentThread().getId());<br>                    System.out.println(<span class="hljs-string">&quot;Current thread name:&quot;</span> + Thread.currentThread().getName());<br>                    System.out.println();<br>                &#125;<br>            &#125;);<br>        &#125;<br>        Thread.sleep(<span class="hljs-number">3000</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;Thread pool size is:&quot;</span> + threadSet.size());<br>        System.out.println();<br>        <br>        singleThreadExecutor.execute(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Current thread is from cachedThreadPool：&quot;</span>+threadSet.contains(Thread.currentThread().getId()));<br>            System.out.println(<span class="hljs-string">&quot;Current thread id:&quot;</span> + Thread.currentThread().getId());<br>            threadSet.add(Thread.currentThread().getId());<br>            System.out.println(<span class="hljs-string">&quot;Current thread name:&quot;</span> + Thread.currentThread().getName());<br>            System.out.println();<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Current thread id:<span class="hljs-number">12</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span><br><br>Current thread id:<span class="hljs-number">12</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span><br><br>Current thread id:<span class="hljs-number">12</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span><br><br>Current thread id:<span class="hljs-number">12</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span><br><br>Current thread id:<span class="hljs-number">12</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span><br><br>Thread pool size is:<span class="hljs-number">1</span><br><br>Current thread is from cachedThreadPool：<span class="hljs-literal">true</span><br>Current thread id:<span class="hljs-number">12</span><br>Current thread name:pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="实现源码-2"><a href="#实现源码-2" class="headerlink" title="实现源码"></a>实现源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newSingleThreadExecutor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FinalizableDelegatedExecutorService</span><br>        (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newSingleThreadExecutor</span><span class="hljs-params">(ThreadFactory threadFactory)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FinalizableDelegatedExecutorService</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),threadFactory));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="池模型-2"><a href="#池模型-2" class="headerlink" title="池模型"></a>池模型</h3><p><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/SingleThreadPool.png"></p><h3 id="工作流程-2"><a href="#工作流程-2" class="headerlink" title="工作流程"></a>工作流程</h3><p>SingleThreadPool会在底层维护一条线程，且最多只有一条线程处于活动状态执行任务，当任务被提交时，如果当前线程空闲，那么交由该线程执行此任务，如果线程繁忙，那么任务会进入LinkedBlockingQueue中，待线程空闲后，再交付给线程处理，线程会一直存在于线程池中直到线程池关闭。<br><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/single.png"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>从工作流程中可以看出，SingleThreadPool只适合于单机模式下使用，因为其内部只有一条线程进行任务处理，导致其效率会非常低，在日常开发中使用较少。</p><h2 id="ScheduledThreadPool"><a href="#ScheduledThreadPool" class="headerlink" title="ScheduledThreadPool"></a>ScheduledThreadPool</h2><h3 id="基础案例"><a href="#基础案例" class="headerlink" title="基础案例"></a>基础案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledThreadPoolUsage</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">scheduledThreadPool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">3</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        Set&lt;Long&gt; threadSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            scheduledThreadPool.schedule(() -&gt; &#123;<br>                <span class="hljs-keyword">synchronized</span> (lock)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;Current thread id:&quot;</span>+Thread.currentThread().getId());<br>                    threadSet.add(Thread.currentThread().getId());<br>                    System.out.println(<span class="hljs-string">&quot;Now time is:&quot;</span>+ LocalDateTime.now());<br>                    System.out.println();<br>                &#125;<br>            &#125;,<span class="hljs-number">3</span>, TimeUnit.SECONDS);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;Thread pool size is:&quot;</span>+threadSet.size());<br>        scheduledThreadPool.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Current thread id:<span class="hljs-number">12</span><br>Now time is:<span class="hljs-number">2022</span>-09-26T15:09:<span class="hljs-number">44.237149</span><br><br>Current thread id:<span class="hljs-number">13</span><br>Now time is:<span class="hljs-number">2022</span>-09-26T15:09:<span class="hljs-number">46.199538</span><br><br>Current thread id:<span class="hljs-number">12</span><br>Now time is:<span class="hljs-number">2022</span>-09-26T15:09:<span class="hljs-number">48.209985</span><br><br>Current thread id:<span class="hljs-number">14</span><br>Now time is:<span class="hljs-number">2022</span>-09-26T15:09:<span class="hljs-number">50.218799</span><br><br>Current thread id:<span class="hljs-number">13</span><br>Now time is:<span class="hljs-number">2022</span>-09-26T15:09:<span class="hljs-number">52.226608</span><br><br>Thread pool size is:<span class="hljs-number">3</span><br>Current thread id:<span class="hljs-number">12</span><br>Now time is:<span class="hljs-number">2022</span>-09-26T15:09:<span class="hljs-number">54.236475</span><br></code></pre></td></tr></table></figure><h3 id="池模型-3"><a href="#池模型-3" class="headerlink" title="池模型"></a>池模型</h3><p><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/ScheduledThreadPool.png"></p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>从工作流程中可以看出，ScheduledThreadPool适用于需要单个后台线程执行周期任务，同时需要保证任务顺序执行的应用场景。</p><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><table><thead><tr><th>类别</th><th>最大线程数量</th><th>线程是否会被销毁</th><th>是否阻塞</th><th>任务队列</th><th>队列大小</th></tr></thead><tbody><tr><td>CachedThreadPool</td><td>Inter.MAX_VALUE</td><td>是，超过60s的空闲线程会被销毁</td><td>否，有新任务且无空闲线程则开新线程，有空闲线程则用空闲线程</td><td>SynchronousQueue</td><td>无限制</td></tr><tr><td>FixedThreadPool</td><td>nThread(初始化时可自己指定)</td><td>否，线程池中一直存在nThread条线程</td><td>是，如果有新任务且无空闲线程，那么任务进入队列等待，直到有空闲线程</td><td>LinkedBlockingQueue</td><td>无限制</td></tr><tr><td>SingleThreadPool</td><td>1</td><td>否，线程池中一直存在1条线程</td><td>是，如果有新任务且无空闲线程，那么任务进入队列等待，直到线程空闲，依次处理</td><td>LinkedBlockingQueue</td><td>无限制</td></tr><tr><td>ScheduledThreadPool</td><td>coreSize(初始化时可自己指定)</td><td>否，线程池中会一直存在coreSize条线程</td><td>是</td><td>DelayedWorkQueue</td><td>无限制</td></tr></tbody></table><h2 id="ThreadPoolExecutor自定义线程池"><a href="#ThreadPoolExecutor自定义线程池" class="headerlink" title="ThreadPoolExecutor自定义线程池"></a>ThreadPoolExecutor自定义线程池</h2><h3 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h3><p>以上四种线程池都是基于ThreadPoolExecutor实现，下面将介绍ThreadPoolExecutor的基本组成。<br><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/ThreadPoolExecutor%20Design.png"></p><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><p>线程池在内部实际上构建了一个生产者消费者模型，将线程和任务两者解耦，并不直接关联，从而良好的缓冲任务，复用线程。线程池的运行主要分成两部分：任务管理、线程管理。任务管理部分充当生产者的角色，当任务提交后，线程池会判断该任务后续的流转：<br>（1）直接申请线程执行该任务；<br>（2）缓冲到队列中等待线程执行；<br>（3）拒绝该任务。线程管理部分是消费者，它们被统一维护在线程池内，根据任务请求进行线程的分配，当线程执行完任务后则会继续获取新的任务去执行，最终当线程获取不到任务的时候，线程就会被回收。<br><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/ThreadPoolExecutorWork.png"></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>线程池的生命周期一共有五种状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RUNNING</span>    <span class="hljs-operator">=</span> -<span class="hljs-number">1</span> &lt;&lt; COUNT_BITS;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHUTDOWN</span>   <span class="hljs-operator">=</span>  <span class="hljs-number">0</span> &lt;&lt; COUNT_BITS;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">STOP</span>       <span class="hljs-operator">=</span>  <span class="hljs-number">1</span> &lt;&lt; COUNT_BITS;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TIDYING</span>    <span class="hljs-operator">=</span>  <span class="hljs-number">2</span> &lt;&lt; COUNT_BITS;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TERMINATED</span> <span class="hljs-operator">=</span>  <span class="hljs-number">3</span> &lt;&lt; COUNT_BITS;<br></code></pre></td></tr></table></figure><p><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/Life%20Cycle.png"><br>状态转换如下图所示<br><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/lifer.png"></p><table><thead><tr><th align="left">方法</th><th>流程</th></tr></thead><tbody><tr><td align="left">shutdownNow()</td><td>调用shutdownNow()方法后，线程池会进入STOP状态，不再接收新任务，同时会中断正在处理任务中的线程</td></tr><tr><td align="left">shutdown()</td><td>调用shutdown方法后，线程池会进入SHUTDOWN状态,不再接收新任务，但是会将未处理完毕任务处理完成</td></tr></tbody></table><h3 id="任务执行机制"><a href="#任务执行机制" class="headerlink" title="任务执行机制"></a>任务执行机制</h3><h4 id="任务提交"><a href="#任务提交" class="headerlink" title="任务提交"></a>任务提交</h4><p>当有新任务提交后，会进行以下步骤<br>1.检查线程池状态，如果线程池状态不为RUNNING，则此任务会被直接拒绝。<br>2.如果workerCount &lt; corePoolSize，则创建并启动一个线程来执行新提交的任务。<br>3.如果workerCount &gt;&#x3D; corePoolSize，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中。<br>4.如果workerCount &gt;&#x3D; corePoolSize &amp;&amp; workerCount &lt; maximumPoolSize，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务。<br>5.如果workerCount &gt;&#x3D; maximumPoolSize，并且线程池内的阻塞队列已满, 则根据拒绝策略来处理该任务, 默认的处理方式是直接抛异常。<br><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/taskC.png"></p><h4 id="任务缓冲"><a href="#任务缓冲" class="headerlink" title="任务缓冲"></a>任务缓冲</h4><p>任务缓冲在线程池中是通过阻塞队列实现的，其核心思想即将任务存储在一个队列中缓存起来，如果当前池中有空闲线程，则调用线程从队列中取出任务进行处理，如此将线程与任务分开。同时不一样的队列，也可以实现不一样的任务存取策略。<br><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/taskStorage.png"></p><h4 id="任务申请"><a href="#任务申请" class="headerlink" title="任务申请"></a>任务申请</h4><p>一个任务被消费有两种方式，第一种是直接创建一个新的线程处理，第二种是池中的线程从缓冲队列中获取任务并消费，如此反复。<br>当线程空闲时需要不断尝试从任务的缓冲队列中获取新的任务消费，这个过程由getTask方法实现，其流程如下图所示<br><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/getTask.png"><br>在ThreadPoolExecutor类中每条线程都有一个Worker会不断的尝试获取新的任务，如果worker接收不到任务后，就会开始进入被回收的流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h4 id="任务拒绝"><a href="#任务拒绝" class="headerlink" title="任务拒绝"></a>任务拒绝</h4><p>当线程池的任务缓存队列已满，且线程池中的线程数量已经达到设置的最大数量，无法满足处理新任务的条件时，需要执行拒绝策略，这是对线程池的一种保护。目前JDK提供了四种线程的拒绝策略，如下所示<br><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/ThreadReject.png"></p><h3 id="任务调度-Worker-管理机制"><a href="#任务调度-Worker-管理机制" class="headerlink" title="任务调度(Worker)管理机制"></a>任务调度(Worker)管理机制</h3><p>线程池内的线程管理通过池内的工作线程Worker实现，其中有两个重要成员变量</p><h4 id="Worker实现"><a href="#Worker实现" class="headerlink" title="Worker实现"></a>Worker实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span><br>        <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span><br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * This class will never be serialized, but we provide a</span><br><span class="hljs-comment">     * serialVersionUID to suppress a javac warning.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6138294804551838833L</span>;<br><br>    <span class="hljs-comment">/** Thread this worker is running in.  Null if factory fails. */</span><br>    <span class="hljs-comment">//Worker持有的线程，用来消费任务</span><br>    <span class="hljs-keyword">final</span> Thread thread;<br>    <span class="hljs-comment">/** Initial task to run.  Possibly null. */</span><br>    <span class="hljs-comment">//接收任务的变量，从任务缓冲队列中获取任务</span><br>    Runnable firstTask;<br>&#125;<br></code></pre></td></tr></table></figure><p>thread是通过ThreadFactory创建的线程，用于执行消费任务<br>firstTask为需要消费的第一个任务，如果firstTask不为null，那么直接执行此任务并创建核心线程，如果firstTask为null，说明当前线程已经空闲，需要从任务缓冲队列中获取新的任务<br><img src="https://logobakazhou.oss-cn-hangzhou.aliyuncs.com/2022/09/27/imgs/workQueue.png"></p><h4 id="addWorker-增加worker线程"><a href="#addWorker-增加worker线程" class="headerlink" title="addWorker 增加worker线程"></a>addWorker 增加worker线程</h4><p>增加线程是通过线程池中的addWorker方法，该方法的功能就是增加一个线程，该方法不考虑线程池是在哪个阶段增加的该线程，这个分配线程的策略是在上个步骤完成的，该步骤仅仅完成增加线程，并使它运行，最后返回是否成功这个结果。addWorker方法有两个参数：firstTask、core。firstTask参数用于指定新增的线程执行的第一个任务，该参数可以为空；core参数为true表示在新增线程时会判断当前活动线程数是否少于corePoolSize，false表示新增线程前需要判断当前活动线程数是否少于maximumPoolSize，其执行流程如下图所示：<br><img src="https://p0.meituan.net/travelcube/49527b1bb385f0f43529e57b614f59ae145454.png"></p><h4 id="processWorkerExit-回收worker线程"><a href="#processWorkerExit-回收worker线程" class="headerlink" title="processWorkerExit 回收worker线程"></a>processWorkerExit 回收worker线程</h4><p>线程池中线程的销毁依赖JVM自动的回收，线程池做的工作是根据当前线程池的状态维护一定数量的线程引用，防止这部分线程被JVM回收，当线程池决定哪些线程需要回收时，只需要将其引用消除即可。Worker被创建出来后，就会不断地进行轮询，然后获取任务去执行，核心线程可以无限等待获取任务，非核心线程要限时获取任务。当Worker无法获取到任务，也就是获取的任务为空时，循环会结束，Worker会主动消除自身在线程池内的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//尝试从workQueue中获取任务，一旦获取到任务就进入while循环体内，如果两种方式都获取不到任务，说明线程已经进入空闲状态，进入判断是否需要回收的流程</span><br>  <span class="hljs-keyword">while</span> (task != <span class="hljs-literal">null</span> || (task = getTask()) != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">//进入while内代表已经获取到任务，开始执行任务</span><br>  &#125;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">//两种方式都已经获取不到任务，进入回收流程</span><br>  processWorkerExit(w, completedAbruptly);<span class="hljs-comment">//获取不到任务时，主动回收自己</span><br>&#125;<br></code></pre></td></tr></table></figure><p>线程销毁的流程如图所示<br><img src="https://p0.meituan.net/travelcube/90ea093549782945f2c968403fdc39d415386.png"><br>在processWorkerExit中，将线程引用移出线程池就已经结束了线程销毁的部分。但由于引起线程销毁的可能性有很多，线程池还要判断是什么引发了这次销毁，是否要改变线程池的现阶段状态，是否要根据新状态，重新分配线程。</p><h4 id="run-worker线程执行任务"><a href="#run-worker线程执行任务" class="headerlink" title="run worker线程执行任务"></a>run worker线程执行任务</h4><p>1.while循环不断地通过getTask()方法获取任务。 2.getTask()方法从阻塞队列中取任务。 3.如果线程池正在停止，那么要保证当前线程是中断状态，否则要保证当前线程不是中断状态。 4.执行任务。 5.如果getTask结果为null则跳出循环，执行processWorkerExit()方法，销毁线程。<br>执行流程如下图所示：<br><img src="https://p0.meituan.net/travelcube/879edb4f06043d76cea27a3ff358cb1d45243.png"></p><h2 id="线程池实战"><a href="#线程池实战" class="headerlink" title="线程池实战"></a>线程池实战</h2><h3 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h3><ol><li>corePoolSize ：核心线程线程数</li></ol><p>定义了最小可以同时运行的线程数量。</p><ol start="2"><li>maximumPoolSize ：最大线程数</li></ol><p>当队列中存放的任务达到队列容量时，当前可以同时运行的线程数量会扩大到最大线程数。</p><ol start="3"><li>keepAliveTime ：等待时间</li></ol><p>当线程数大于核心线程数时，多余的空闲线程存活的最长时间。</p><ol start="4"><li>unit ：时间单位。</li></ol><p>keepAliveTime 参数的时间单位，包括 TimeUnit.SECONDS、TimeUnit.MINUTES、TimeUnit.HOURS、TimeUnit.DAYS 等等。</p><ol start="5"><li>workQueue ：任务队列</li></ol><p>任务队列，用来储存等待执行任务的队列。</p><ol start="6"><li>threadFactory ：线程工厂</li></ol><p>线程工厂，用来创建线程，一般默认即可。</p><ol start="7"><li>handler ：拒绝策略</li></ol><p>也称饱和策略；当提交的任务过多而不能及时处理时，可以通过定制策略来处理任务。  </p><p>常用的拒绝策略包括 :</p><ul><li>ThreadPoolExecutor.AbortPolicy： 抛出 RejectedExecutionException 来拒绝新任务的处理，是 Spring 中使用的默认拒绝策略。</li><li>ThreadPoolExecutor.CallerRunsPolicy： 线程调用运行该任务的 execute 本身，也就是直接在调用 execute 方法的线程中运行 (run) 被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度，但可能造成延迟。若应用程序可以承受此延迟且不能丢弃任何一个任务请求，可以选择这个策略。</li><li>ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。</li><li>ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。</li></ul><h3 id="工作流程-3"><a href="#工作流程-3" class="headerlink" title="工作流程"></a>工作流程</h3><ul><li>1、线程池创建，准备核心线程，准备接受任务；</li><li>2、新的任务进来，用空闲的核心线程执行任务；</li><li>3、核心线程满了，将再进来的任务放入阻塞队列中，空闲的核心线程会去阻塞队列中获取任务执行；</li><li>4、阻塞队列满了，就直接开启新线程执行，最大只能开到max设置的数量；</li><li>5、任务执行完成，空闲的线程（最大线程数-核心线程数）会在keepAliveTime指定的时间后自动销毁，最终保持到核心线程数量；</li><li>6、如果线程开到了最大线程数，还有新的任务进来，就会使用指定的拒绝策略进行处理。</li></ul><h3 id="练习一-使用线程池优化查询效率"><a href="#练习一-使用线程池优化查询效率" class="headerlink" title="练习一 使用线程池优化查询效率"></a>练习一 使用线程池优化查询效率</h3><h4 id="业务场景介绍"><a href="#业务场景介绍" class="headerlink" title="业务场景介绍"></a>业务场景介绍</h4><p>由于数据库中的数据量较大，且每个user包含的信息较多，导致通过id查询user的接口耗时变长，甚至可能会达到1s之久，在此前提下对代码进行优化</p><h4 id="基本类"><a href="#基本类" class="headerlink" title="基本类"></a>基本类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRepository</span> &#123;<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Long id)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//假设根据ID查询User需要耗时2s</span><br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(id);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-type">UserRepository</span> <span class="hljs-variable">repository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRepository</span>();<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(Long id)</span>&#123;<br>        <span class="hljs-keyword">return</span> repository.getUserById(id);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;User&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Long id;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Task</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>().getUser(<span class="hljs-built_in">this</span>.id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单线程解决方案"><a href="#单线程解决方案" class="headerlink" title="单线程解决方案"></a>单线程解决方案</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>        <span class="hljs-comment">//获取开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-comment">// 假设要查10个用户的信息，用一条线程去查就需要15s</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++) &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getUser((<span class="hljs-type">long</span>) i);<br>            System.out.println(<span class="hljs-string">&quot;user id:&quot;</span>+user.getId());<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">//获取结束时间</span><br>        System.out.println(<span class="hljs-string">&quot;单线程总耗时:&quot;</span> + (endTime - startTime) / <span class="hljs-number">1000</span> + <span class="hljs-string">&quot;s&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">user id:<span class="hljs-number">0</span><br>user id:<span class="hljs-number">1</span><br>user id:<span class="hljs-number">2</span><br>user id:<span class="hljs-number">3</span><br>user id:<span class="hljs-number">4</span><br>user id:<span class="hljs-number">5</span><br>user id:<span class="hljs-number">6</span><br>user id:<span class="hljs-number">7</span><br>user id:<span class="hljs-number">8</span><br>user id:<span class="hljs-number">9</span><br>user id:<span class="hljs-number">10</span><br>user id:<span class="hljs-number">11</span><br>user id:<span class="hljs-number">12</span><br>user id:<span class="hljs-number">13</span><br>user id:<span class="hljs-number">14</span><br>单线程总耗时:15s<br></code></pre></td></tr></table></figure><h4 id="线程池优化方案"><a href="#线程池优化方案" class="headerlink" title="线程池优化方案"></a>线程池优化方案</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JucMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        List&lt;Task&gt; tasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++) &#123;<br>            tasks.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>((<span class="hljs-type">long</span>)i));<br>        &#125;<br>        <span class="hljs-type">ThreadFactory</span> <span class="hljs-variable">threadFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactoryBuilder</span>()<br>                .setNameFormat(<span class="hljs-string">&quot;demo-pool-%d&quot;</span>).build();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * corePoolSize    线程池核心池的大小</span><br><span class="hljs-comment">         * maximumPoolSize 线程池中允许的最大线程数量</span><br><span class="hljs-comment">         * keepAliveTime   当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间</span><br><span class="hljs-comment">         * unit            keepAliveTime 的时间单位</span><br><span class="hljs-comment">         * workQueue       用来储存等待执行任务的队列</span><br><span class="hljs-comment">         * threadFactory   创建线程的工厂类</span><br><span class="hljs-comment">         * handler         拒绝策略类,当线程池数量达到上线并且workQueue队列长度达到上限时就需要对到来的任务做拒绝处理</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">500</span>, TimeUnit.MILLISECONDS,<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1024</span>), threadFactory,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br>        <span class="hljs-comment">//获取开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        List&lt;Future&lt;User&gt;&gt; futures;<br>        <span class="hljs-keyword">synchronized</span> (lock)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                futures = threadPool.invokeAll(tasks);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                threadPool.shutdown();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Future&lt;User&gt; user : futures) &#123;<br>            System.out.println(<span class="hljs-string">&quot;user id:&quot;</span>+user.get().getId());<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">//获取结束时间</span><br>        System.out.println(<span class="hljs-string">&quot;多线程总耗时:&quot;</span> + (endTime - startTime) / <span class="hljs-number">1000</span> + <span class="hljs-string">&quot;s&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">user id:<span class="hljs-number">0</span><br>user id:<span class="hljs-number">1</span><br>user id:<span class="hljs-number">2</span><br>user id:<span class="hljs-number">3</span><br>user id:<span class="hljs-number">4</span><br>user id:<span class="hljs-number">5</span><br>user id:<span class="hljs-number">6</span><br>user id:<span class="hljs-number">7</span><br>user id:<span class="hljs-number">8</span><br>user id:<span class="hljs-number">9</span><br>user id:<span class="hljs-number">10</span><br>user id:<span class="hljs-number">11</span><br>user id:<span class="hljs-number">12</span><br>user id:<span class="hljs-number">13</span><br>user id:<span class="hljs-number">14</span><br>多线程总耗时:4s<br></code></pre></td></tr></table></figure><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>可以看到在使用了线程池后，效率得到了极大的提升，耗时从15s减少到了4s</p>]]></content>
    
    
    <categories>
      
      <category>Java多线程</category>
      
      <category>线程池</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty网络编程</title>
    <link href="/2022/09/24/Netty%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/09/24/Netty%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h1><ul><li>Netty官方文档:<a href="https://netty.io/4.1/api/index.html">https://netty.io/4.1/api/index.html</a></li><li>Practice Repository:<a href="https://github.com/bakazhou/JUC">https://github.com/bakazhou/JUC</a></li></ul><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#Netty"></a></h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#%E4%B8%80%E3%80%81%E6%A6%82%E8%BF%B0" title="一、概述"></a>一、概述<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#%E4%B8%80%E3%80%81%E6%A6%82%E8%BF%B0"></a></h1><h2 id="1、什么是Netty"><a href="#1、什么是Netty" class="headerlink" title="1、什么是Netty"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFNetty" title="1、什么是Netty"></a>1、什么是Netty<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFNetty"></a></h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Netty <span class="hljs-keyword">is</span> an asynchronous event-driven network <span class="hljs-built_in">application</span> framework<br><span class="hljs-keyword">for</span> rapid development <span class="hljs-keyword">of</span> maintainable high performance protocol servers &amp; clients.<br></code></pre></td></tr></table></figure><p>Netty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端</p><p><strong>注意</strong>：<code>netty的异步还是基于多路复用的，并没有实现真正意义上的异步IO</code></p><h2 id="2、Netty的优势"><a href="#2、Netty的优势" class="headerlink" title="2、Netty的优势"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#2%E3%80%81Netty%E7%9A%84%E4%BC%98%E5%8A%BF" title="2、Netty的优势"></a>2、Netty的优势<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#2%E3%80%81Netty%E7%9A%84%E4%BC%98%E5%8A%BF"></a></h2><p>如果使用传统NIO，其工作量大，bug 多</p><ul><li>需要自己构建协议</li><li>解决 TCP 传输问题，如粘包、半包</li><li>因为bug的存在，epoll 空轮询导致 CPU 100%</li></ul><p>Netty 对 API 进行增强，使之更易用，如</p><ul><li>FastThreadLocal &#x3D;&gt; ThreadLocal</li><li>ByteBuf &#x3D;&gt; ByteBuffer</li></ul><h1 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#%E4%BA%8C%E3%80%81%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B" title="二、入门案例"></a>二、入门案例<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#%E4%BA%8C%E3%80%81%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B"></a></h1><h2 id="1、服务器端代码"><a href="#1、服务器端代码" class="headerlink" title="1、服务器端代码"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#1%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BB%A3%E7%A0%81" title="1、服务器端代码"></a>1、服务器端代码<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#1%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BB%A3%E7%A0%81"></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、启动器，负责装配netty组件，启动服务器</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>()<br>                <span class="hljs-comment">// 2、创建 NioEventLoopGroup，可以简单理解为 线程池 + Selector</span><br>                .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>())<br>                <span class="hljs-comment">// 3、选择服务器的 ServerSocketChannel 实现</span><br>                .channel(NioServerSocketChannel.class)<br>                <span class="hljs-comment">// 4、child 负责处理读写，该方法决定了 child 执行哪些操作</span><br>            <span class="hljs-comment">// ChannelInitializer 处理器（仅执行一次）</span><br>            <span class="hljs-comment">// 它的作用是待客户端SocketChannel建立连接后，执行initChannel以便添加更多的处理器</span><br>                .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(NioSocketChannel nioSocketChannel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-comment">// 5、SocketChannel的处理器，使用StringDecoder解码，ByteBuf=&gt;String</span><br>                        nioSocketChannel.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringDecoder</span>());<br>                        <span class="hljs-comment">// 6、SocketChannel的业务处理，使用上一个处理器的处理结果</span><br>                        nioSocketChannel.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;String&gt;() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, String s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                                System.out.println(s);<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                    <span class="hljs-comment">// 7、ServerSocketChannel绑定8080端口</span><br>                &#125;).bind(<span class="hljs-number">8080</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、客户端代码"><a href="#2、客户端代码" class="headerlink" title="2、客户端代码"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#2%E3%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%A0%81" title="2、客户端代码"></a>2、客户端代码<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#2%E3%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%A0%81"></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>                .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>())<br>                <span class="hljs-comment">// 选择客户 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现</span><br>                .channel(NioSocketChannel.class)<br>                <span class="hljs-comment">// ChannelInitializer 处理器（仅执行一次）</span><br>                <span class="hljs-comment">// 它的作用是待客户端SocketChannel建立连接后，执行initChannel以便添加更多的处理器</span><br>                .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(Channel channel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-comment">// 消息会经过通道 handler 处理，这里是将 String =&gt; ByteBuf 编码发出</span><br>                        channel.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<br>                    &#125;<br>                &#125;)<br>                <span class="hljs-comment">// 指定要连接的服务器和端口</span><br>                .connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>))<br>                <span class="hljs-comment">// Netty 中很多方法都是异步的，如 connect</span><br>                <span class="hljs-comment">// 这时需要使用 sync 方法等待 connect 建立连接完毕</span><br>                .sync()<br>                <span class="hljs-comment">// 获取 channel 对象，它即为通道抽象，可以进行数据读写操作</span><br>                .channel()<br>                <span class="hljs-comment">// 写入消息并清空缓冲区</span><br>                .writeAndFlush(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、运行流程"><a href="#3、运行流程" class="headerlink" title="3、运行流程"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#3%E3%80%81%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B" title="3、运行流程"></a>3、运行流程<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#3%E3%80%81%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B"></a></h2><p><strong>左：客户端 右：服务器端</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210420132155.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c904b7d6d574b33999c73e2afa072f1~tplv-k3u1fbpfcp-zoom-1.image"></a><br>Client发送数据，经过client自身的handler，将数据转为ByteBuf，server接收到数据后，通过server的handler将数据从byteBuf转为所需要的数据，并进行处理</p><h3 id="组件解释"><a href="#组件解释" class="headerlink" title="组件解释"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#%E7%BB%84%E4%BB%B6%E8%A7%A3%E9%87%8A" title="组件解释"></a>组件解释<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#%E7%BB%84%E4%BB%B6%E8%A7%A3%E9%87%8A"></a></h3><ul><li><p>channel 可以理解为数据的通道</p></li><li><p>msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline 中的各个 handler 加工，会变成其它类型对象，最后输出又变成 ByteBuf</p></li><li><p>handler 可以理解为数据的处理工序</p><ul><li><p>工序有多道，<strong>合在一起就是 pipeline（传递途径）</strong> ，pipeline 负责发布事件（读、读取完成…）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法）</p><ul><li>pipeline 中有多个 handler，处理时会依次调用其中的 handler</li></ul></li><li><p>handler 分 Inbound 和 Outbound 两类</p><ul><li>Inbound 入站</li><li>Outbound 出站</li></ul></li></ul></li><li><p>eventLoop 可以理解为处理数据的工人</p><ul><li>eventLoop 可以管理多个 channel 的 io 操作，并且一旦 eventLoop 负责了某个 channel，就<strong>会将其与channel进行绑定</strong>，以后该 channel 中的 io 操作都由该 eventLoop 负责</li><li>eventLoop 既可以执行 io 操作，<strong>也可以进行任务处理</strong>，每个 eventLoop 有自己的任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务</li><li>eventLoop 按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每个 handler 指定不同的 eventLoop</li></ul></li></ul><h1 id="三、组件"><a href="#三、组件" class="headerlink" title="三、组件"></a>三、组件<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#%E4%B8%89%E3%80%81%E7%BB%84%E4%BB%B6"></a></h1><h2 id="1、EventLoop"><a href="#1、EventLoop" class="headerlink" title="1、EventLoop"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#1%E3%80%81EventLoop" title="1、EventLoop"></a>1、EventLoop<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#1%E3%80%81EventLoop"></a></h2><p><strong>事件循环对象</strong> EventLoop</p><p>EventLoop 本质是一个<strong>单线程执行器</strong>（同时<strong>维护了一个 Selector</strong>），里面有 run 方法处理一个或多个 Channel 上源源不断的 io 事件</p><p>它的继承关系如下</p><ul><li><p>继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法</p></li><li><p>继承自 netty 自己的 OrderedEventExecutor</p><ul><li>提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop</li><li>提供了 EventLoopGroup parent() 方法来看看自己属于哪个 EventLoopGroup</li></ul></li></ul><p><strong>事件循环组</strong> EventLoopGroup</p><p>EventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）</p><ul><li><p>继承自 netty 自己的 EventExecutorGroup</p><ul><li>实现了 Iterable 接口提供遍历 EventLoop 的能力</li><li>另有 next 方法获取集合中下一个 EventLoop</li></ul></li></ul><h3 id="处理普通与定时任务"><a href="#处理普通与定时任务" class="headerlink" title="处理普通与定时任务"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#%E5%A4%84%E7%90%86%E6%99%AE%E9%80%9A%E4%B8%8E%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1" title="处理普通与定时任务"></a>处理普通与定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestEventLoop</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1 创建事件循环组</span><br><br>        <span class="hljs-comment">// io事件，普通任务，定时任务</span><br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">nioEventLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">//普通任务，定时任务</span><br>        <span class="hljs-type">DefaultEventLoopGroup</span> <span class="hljs-variable">defaultEventLoopGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEventLoopGroup</span>();<br><br>        <span class="hljs-comment">//2 获取事件循环对象</span><br>        System.out.println(nioEventLoopGroup.next());<br>        System.out.println(nioEventLoopGroup.next());<br>        System.out.println(nioEventLoopGroup.next());<br><br>        <span class="hljs-comment">//3 执行普通任务</span><br>        nioEventLoopGroup.next().execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//4 定时任务</span><br>        nioEventLoopGroup.next().scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            &#125;<br>        &#125;,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>, TimeUnit.SECONDS);   <br>        <br>        <span class="hljs-comment">//5 关闭</span><br>        nioEventLoopGroup.shutdownGracefully();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>关闭 EventLoopGroup</strong><br>优雅关闭 <code>shutdownGracefully</code> 方法。该方法会首先切换 <code>EventLoopGroup</code> 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的</p><h3 id="处理IO任务"><a href="#处理IO任务" class="headerlink" title="处理IO任务"></a>处理IO任务<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#%E5%A4%84%E7%90%86IO%E4%BB%BB%E5%8A%A1"></a></h3><h4 id="服务器代码"><a href="#服务器代码" class="headerlink" title="服务器代码"></a>服务器代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventLoopServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 只负责accept事件</span><br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><br>        <span class="hljs-comment">//负责read,write事件</span><br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// 对eventloop进行指责划分 分为boss和worker</span><br>        <span class="hljs-comment">// 此处划分为accept事件和read事件</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>().<br>                group(boss,worker).<br>                <span class="hljs-comment">//NioServerSocketChannel只会和NioEventLoopGroup中的一个EventLoop绑定</span><br>                channel(NioServerSocketChannel.class).<br>                childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-comment">// 为handler设置指定的NioEventGroup</span><br>                        ch.pipeline().addLast(worker,<span class="hljs-string">&quot;handleRead&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                                System.out.println(worker.next());<br>                                <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> (ByteBuf) msg;<br>                                System.out.println(buffer.toString(Charset.defaultCharset()));<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;).<br>                bind(<span class="hljs-number">8080</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventLoopClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>                .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>())<br>                <span class="hljs-comment">// 选择客户 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现</span><br>                .channel(NioSocketChannel.class)<br>                <span class="hljs-comment">// ChannelInitializer 处理器（仅执行一次）</span><br>                <span class="hljs-comment">// 它的作用是待客户端SocketChannel建立连接后，执行initChannel以便添加更多的处理器</span><br>                .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(Channel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-comment">// 消息会经过通道 handler 处理，这里是将 String =&gt; ByteBuf 编码发出</span><br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<br>                    &#125;<br>                &#125;)<br>                <span class="hljs-comment">// 指定要连接的服务器和端口</span><br>                .connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>))<br>                <span class="hljs-comment">// Netty 中很多方法都是异步的，如 connect</span><br>                <span class="hljs-comment">// 这时需要使用 sync 方法等待 connect 建立连接完毕</span><br>                .sync()<br>                <span class="hljs-comment">// 获取 channel 对象，它即为通道抽象，可以进行数据读写操作</span><br>                .channel();<br>        client.writeAndFlush(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>        client.writeAndFlush(<span class="hljs-string">&quot;world\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h3><p>Bootstrap的group()方法<strong>可以传入两个EventLoopGroup参数</strong>，分别负责处理不同的事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>()<br>            <span class="hljs-comment">// 两个Group，分别为Boss 负责Accept事件，Worker 负责读写事件</span><br>                .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">2</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个EventLoop可以<strong>负责多个</strong>Channel，且EventLoop一旦与Channel绑定，则<strong>一直负责</strong>处理该Channel中的事件</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210421103251.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3443b295bdbc47d58617072e3101cdb6~tplv-k3u1fbpfcp-zoom-1.image"></a></p><h4 id="增加自定义EventLoopGroup"><a href="#增加自定义EventLoopGroup" class="headerlink" title="增加自定义EventLoopGroup"></a>增加自定义EventLoopGroup<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89EventLoopGroup"></a></h4><p>当有的<strong>任务需要较长的时间处理时，可以使用非NioEventLoopGroup</strong>，避免同一个NioEventLoop中的其他Channel在较长的时间内都无法得到处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 增加自定义的非NioEventLoopGroup</span><br>        <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEventLoopGroup</span>();<br>        <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>()<br>                .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">2</span>))<br>                .channel(NioServerSocketChannel.class)<br>                .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-comment">// 增加两个handler，第一个使用NioEventLoopGroup处理，第二个使用自定义EventLoopGroup处理</span><br>                        socketChannel.pipeline().addLast(<span class="hljs-string">&quot;nioHandler&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                                <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> (ByteBuf) msg;<br>                                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + buf.toString(StandardCharsets.UTF_8));<br>                                <span class="hljs-comment">// 调用下一个handler</span><br>                                ctx.fireChannelRead(msg);<br>                            &#125;<br>                        &#125;)<br>                        <span class="hljs-comment">// 该handler绑定自定义的Group</span><br>                        .addLast(group, <span class="hljs-string">&quot;myHandler&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                                <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> (ByteBuf) msg;<br>                                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + buf.toString(StandardCharsets.UTF_8));<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;)<br>                .bind(<span class="hljs-number">8080</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="切换的实现"><a href="#切换的实现" class="headerlink" title="切换的实现"></a>切换的实现<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#%E5%88%87%E6%8D%A2%E7%9A%84%E5%AE%9E%E7%8E%B0"></a></h4><p><strong>不同的EventLoopGroup切换的实现原理如下</strong></p><p>由上面的图可以看出，当handler中绑定的Group不同时，需要切换Group来执行不同的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeChannelRead</span><span class="hljs-params">(<span class="hljs-keyword">final</span> AbstractChannelHandlerContext next, Object msg)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> next.pipeline.touch(ObjectUtil.checkNotNull(msg, <span class="hljs-string">&quot;msg&quot;</span>), next);<br>    <span class="hljs-comment">// 获得下一个EventLoop, excutor 即为 EventLoopGroup</span><br>    <span class="hljs-type">EventExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> next.executor();<br>    <br>    <span class="hljs-comment">// 如果下一个EventLoop 在当前的 EventLoopGroup中</span><br>    <span class="hljs-keyword">if</span> (executor.inEventLoop()) &#123;<br>        <span class="hljs-comment">// 使用当前 EventLoopGroup 中的 EventLoop 来处理任务</span><br>        next.invokeChannelRead(m);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否则让另一个 EventLoopGroup 中的 EventLoop 来创建任务并执行</span><br>        executor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                next.invokeChannelRead(m);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果两个 handler 绑定的是<strong>同一个EventLoopGroup</strong>，那么就直接调用</li><li>否则，把要调用的代码封装为一个任务对象，由下一个 handler 的 EventLoopGroup 来调用</li></ul><h2 id="2-Channel"><a href="#2-Channel" class="headerlink" title="2.Channel"></a>2.Channel</h2><h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><ul><li><p>close() 可以用来关闭Channel</p></li><li><p>closeFuture() 用来处理 Channel 的关闭</p><ul><li>sync 方法作用是同步等待 Channel 关闭</li><li>而 addListener 方法是异步等待 Channel 关闭</li></ul></li><li><p>pipeline() 方法用于添加处理器</p></li><li><p>write() 方法将数据写入</p><ul><li>因为缓冲机制，数据被写入到 Channel 中以后，不会立即被发送</li><li><strong>只有当缓冲满了或者调用了flush()方法后</strong>，才会将数据通过 Channel 发送出去</li></ul></li><li><p>writeAndFlush() 方法将数据写入并<strong>立即发送（刷出）</strong></p></li></ul><h3 id="ChannelFuture"><a href="#ChannelFuture" class="headerlink" title="ChannelFuture"></a>ChannelFuture</h3><p>带Future和Promise的类都是和异步方法配套使用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChannelClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>                .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>())<br>                .channel(NioSocketChannel.class)<br>                .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(Channel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<br>                    &#125;<br>                &#125;)<br>                <span class="hljs-comment">//connect是异步非阻塞方法，在main函数中只是发起了调用，真正执行的是另一个nio线程，建立连接往往是需要消耗时间的，而如果不执行sync方法，就可能产生连接还没有建立成功，而主线程直接获取了channel</span><br>                <span class="hljs-comment">//，并进行了消息的发送</span><br>                .connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>));<br><br>        channelFuture.sync();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> channelFuture.channel();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                <span class="hljs-keyword">if</span> (input.equals(<span class="hljs-string">&quot;quit&quot;</span>))&#123;<br>                    channel.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                channel.writeAndFlush(input);<br>            &#125;<br>        &#125;).start();<br>        <span class="hljs-comment">//异步等待直到线程关闭</span><br>        <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">closeFuture</span> <span class="hljs-operator">=</span> channel.closeFuture();<br>        closeFuture.sync();<br>        <br>        <span class="hljs-comment">//线程已经关闭</span><br>        System.out.println(<span class="hljs-string">&quot;thread is closed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ChannelFuture连接问题"><a href="#ChannelFuture连接问题" class="headerlink" title="ChannelFuture连接问题"></a>ChannelFuture连接问题</h4><p>connect是异步非阻塞方法，在main函数中只是发起了调用，真正执行的是另一个nio线程，建立连接往往是需要消耗时间的，而如果不执行sync方法，就可能产生连接还没有建立成功，而主线程直接获取了channel，这个channel是没有建立连接的channel，所以消息并不能真正发送出去</p><h4 id="ChannelFuture关闭问题"><a href="#ChannelFuture关闭问题" class="headerlink" title="ChannelFuture关闭问题"></a>ChannelFuture关闭问题</h4><p>当我们要关闭channel时，可以调用channel.close()方法进行关闭。但是该方法也是一个<strong>异步方法</strong>。真正的关闭操作并不是在调用该方法的线程中执行的，而是<strong>在NIO线程中执行真正的关闭操作</strong></p><p>如果我们想在channel<strong>真正关闭以后</strong>，执行一些额外的操作，可以选择以下两种方法来实现</p><ul><li><p>通过channel.closeFuture()方法获得对应的ChannelFuture对象，然后调用<strong>sync()方法</strong>阻塞执行操作的线程，等待channel真正关闭后，再执行其他操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得closeFuture对象</span><br><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">closeFuture</span> <span class="hljs-operator">=</span> channel.closeFuture();<br><br><span class="hljs-comment">// 同步等待NIO线程执行完close操作</span><br>closeFuture.sync();<br></code></pre></td></tr></table></figure></li><li><p>调用<strong>closeFuture.addListener</strong>方法，添加close的后续操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">closeFuture.addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelFutureListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationComplete</span><span class="hljs-params">(ChannelFuture channelFuture)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 等待channel关闭后才执行的操作</span><br>        System.out.println(<span class="hljs-string">&quot;关闭之后执行一些额外操作...&quot;</span>);<br>        <span class="hljs-comment">// 关闭EventLoopGroup</span><br>        group.shutdownGracefully();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h2 id="Handler-gt-Pipeline"><a href="#Handler-gt-Pipeline" class="headerlink" title="Handler -&gt; Pipeline"></a>Handler -&gt; Pipeline</h2><p>ChannelHandler用来处理Channel上的各种事件，分为入栈，出栈两种，所有的ChannelHandler连成一串就组成了Pipeline流水线</p><ul><li>入栈处理器通常是ChannelInBoundHandlerAdapter的子类，用来读取客户端数据，写回结果</li><li>出栈处理器通常是ChannelOutBoundHandlerAdapter的子类，主要对写回的结果进行加工<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PipeLineServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>()<br>                .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>())<br>                .channel(NioServerSocketChannel.class)<br>                .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-comment">// 在socketChannel的pipeline中添加handler</span><br>                        <span class="hljs-comment">// pipeline中handler是带有head与tail节点的双向链表，的实际结构为</span><br>                        <span class="hljs-comment">// head &lt;-&gt; handler1 &lt;-&gt; ... &lt;-&gt; handler4 &lt;-&gt;tail</span><br>                        <span class="hljs-comment">// Inbound主要处理入栈操作，一般为读操作，发生入栈操作时会触发Inbound方法</span><br>                        <span class="hljs-comment">// 入栈时，handler是从head向后调用的</span><br>                        socketChannel.pipeline().addLast(<span class="hljs-string">&quot;handler1&quot;</span> ,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                                <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> (ByteBuf) msg;<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> byteBuf.toString(Charset.defaultCharset())+<span class="hljs-string">&quot; 1 &quot;</span>;<br>                                System.out.println(<span class="hljs-string">&quot;handler1 msg:&quot;</span>+message);<br>                                <span class="hljs-comment">// 父类该方法内部会调用fireChannelRead</span><br>                                <span class="hljs-comment">// 将数据传递给下一个handler</span><br>                                <span class="hljs-built_in">super</span>.channelRead(ctx, message);<br>                            &#125;<br>                        &#125;);<br>                        socketChannel.pipeline().addLast(<span class="hljs-string">&quot;handler2&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">handle2</span> <span class="hljs-operator">=</span> msg.toString()+<span class="hljs-string">&quot; 2 &quot;</span>;<br>                                System.out.println(<span class="hljs-string">&quot;handler2 msg:&quot;</span>+ handle2);<br>                                <span class="hljs-comment">// 执行write操作，使得Outbound的方法能够得到调用</span><br>                                socketChannel.writeAndFlush(ctx.alloc().buffer().writeBytes(<span class="hljs-string">&quot;Server...&quot;</span>.getBytes(StandardCharsets.UTF_8)));<br>                                <span class="hljs-built_in">super</span>.channelRead(ctx, handle2);<br>                            &#125;<br>                        &#125;);<br>                        <span class="hljs-comment">// Outbound主要处理出栈操作，一般为写操作，发生出栈操作时会触发Outbound方法</span><br>                        <span class="hljs-comment">// 出栈时，handler的调用是从tail向前调用的</span><br>                        socketChannel.pipeline().addLast(<span class="hljs-string">&quot;handler3&quot;</span> ,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelOutboundHandlerAdapter</span>()&#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; Outbound handler 1&quot;</span>);<br>                                <span class="hljs-built_in">super</span>.write(ctx, msg, promise);<br>                            &#125;<br>                        &#125;);<br>                        socketChannel.pipeline().addLast(<span class="hljs-string">&quot;handler4&quot;</span> ,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelOutboundHandlerAdapter</span>()&#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; Outbound handler 2&quot;</span>);<br>                                <span class="hljs-built_in">super</span>.write(ctx, msg, promise);<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;)<br>                .bind(<span class="hljs-number">8080</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>通过channel.pipeline().addLast(name, handler)添加handler时，<strong>可以handler取名字</strong>。这样可以调用pipeline的<strong>addAfter、addBefore等方法更灵活地向pipeline中添加handler</strong></p><p>handler需要放入通道的pipeline中，才能根据放入顺序来使用handler</p><ul><li><p>pipeline是结构是一个带有head与tail指针的双向链表，其中的节点为handler</p><ul><li>要通过ctx.fireChannelRead(msg)等方法，<strong>将当前handler的处理结果传递给下一个handler</strong></li></ul></li><li><p>当有<strong>入栈</strong>（Inbound）操作时，会从<strong>head开始向后</strong>调用handler，直到handler不是处理Inbound操作为止</p></li><li><p>当有<strong>出栈</strong>（Outbound）操作时，会从<strong>tail开始向前</strong>调用handler，直到handler不是处理Outbound操作为止</p></li></ul><p><strong>具体结构如下</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210423102354.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/044a6fee057e420ba3cddb54cde7c589~tplv-k3u1fbpfcp-zoom-1.image"></a></p><p><strong>调用顺序如下</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210423105200.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68fe4167cfc74013a29b69e5d6f38d21~tplv-k3u1fbpfcp-zoom-1.image"></a></p><h3 id="OutboundHandler"><a href="#OutboundHandler" class="headerlink" title="OutboundHandler"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#OutboundHandler" title="OutboundHandler"></a>OutboundHandler<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#OutboundHandler"></a></h3><h4 id="socketChannel-writeAndFlush"><a href="#socketChannel-writeAndFlush" class="headerlink" title="socketChannel.writeAndFlush()"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#socketChannel-writeAndFlush" title="socketChannel.writeAndFlush()"></a>socketChannel.writeAndFlush()<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#socketChannel-writeAndFlush"></a></h4><p>当handler中调用该方法进行写操作时，会触发Outbound操作，<strong>此时是从tail向前寻找OutboundHandler</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210423122010.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d48c9618a2d42df8e85666a1795fee6~tplv-k3u1fbpfcp-zoom-1.image"></a></p><h4 id="ctx-writeAndFlush"><a href="#ctx-writeAndFlush" class="headerlink" title="ctx.writeAndFlush()"></a><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#ctx-writeAndFlush" title="ctx.writeAndFlush()"></a>ctx.writeAndFlush()<a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/#ctx-writeAndFlush"></a></h4><p>当handler中调用该方法进行写操作时，会触发Outbound操作，<strong>此时是从当前handler向前寻找OutboundHandler</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210423122050.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4fc86abcbf3044198113d9234b095323~tplv-k3u1fbpfcp-zoom-1.image"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>EventLoop定义了Netty的核心对象，用于处理IO事件，多线程模型、并发，EventLoop, channel, Thread 以及 EventLoopGroup 之间的关系如下图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9d4eb5f01fb40ecb6be9c36dab330f8~tplv-k3u1fbpfcp-zoom-1.image"></p><p>1、一个EventLoopGroup包含一个或者多个EventLoop;</p><p>2、一个EventLoop在它的生命周期内只和一个Thread绑定；</p><p>3、所有有EventLoop处理的I&#x2F;O事件都将在它专有的Thread上被处理；</p><p>4、一个Channel在它的生命周期内只注册于一个EventLoop;</p><p>5、一个EventLoop可能会被分配给一个或多个Channel；<br>其实我们可以简单的把EventLoop及其相关的实现NioEventLoop、NioEventLoopGroup等理解为netty针对我们网络编程时创建的多线程进行了封装和优化，构建了自己的线程模型。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="练习一-双向通信"><a href="#练习一-双向通信" class="headerlink" title="练习一 双向通信"></a>练习一 双向通信</h3><p>编写一个服务端和一个客户端，如果客户端给服务端发送ping，那么服务端会回复pong，同时客户端也要接收pong并打印</p><h4 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现一个双向通信，客户端发送ping，服务端回复pong</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// acceptWorker用于处理accept事件</span><br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">acceptWorker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-comment">// readWriteWorker用于处理read和write事件</span><br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">readWriteWorker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>().<br>                <span class="hljs-comment">//设置为NioEventLoopGroup</span><br>                group(acceptWorker, readWriteWorker).<br>                channel(NioServerSocketChannel.class).<br>                childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(NioSocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-comment">//readHandler 处理来自客户端的信息</span><br>                        socketChannel.pipeline().addLast(acceptWorker, <span class="hljs-string">&quot;readHandler&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                                <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> (ByteBuf) msg;<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> byteBuf.toString(Charset.defaultCharset());<br>                                System.out.println(message);<br>                                <span class="hljs-comment">//如果客户端信息为ping</span><br>                                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;ping&quot;</span>.equals(message))&#123;<br>                                    <span class="hljs-comment">//触发writeHandler</span><br>                                    socketChannel.writeAndFlush(ctx.alloc().buffer().writeBytes(<span class="hljs-string">&quot;pong&quot;</span>.getBytes()));<br>                                &#125;<br>                            &#125;<br>                        &#125;);<br><br>                        <span class="hljs-comment">//writeHandler 向客户端返回信息</span><br>                        socketChannel.pipeline().addLast(readWriteWorker, <span class="hljs-string">&quot;writeHandler&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelOutboundHandlerAdapter</span>() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                                <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> (ByteBuf) msg;<br>                                <span class="hljs-built_in">super</span>.write(ctx, msg, promise);<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;).<br>                bind(<span class="hljs-number">8080</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端代码-1"><a href="#客户端代码-1" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>().<br>                group(worker).<br>                channel(NioSocketChannel.class).<br>                handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(Channel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-comment">//发送消息的处理器，对信息编码</span><br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<br>                        <br>                        <span class="hljs-comment">//处理服务端返回的数据</span><br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>()&#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                                <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> (ByteBuf) msg;<br>                                System.out.println(buf.toString(Charset.defaultCharset()));<br>                                <span class="hljs-built_in">super</span>.channelRead(ctx, msg);<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;).connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>));<br><br><br>        channelFuture.sync();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> channelFuture.channel();<br><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                <span class="hljs-keyword">if</span> (input.equals(<span class="hljs-string">&quot;quit&quot;</span>))&#123;<br>                    channel.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                channel.writeAndFlush(input);<br>            &#125;<br>        &#125;).start();<br>        <span class="hljs-comment">//异步等待直到线程关闭</span><br>        <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">closeFuture</span> <span class="hljs-operator">=</span> channel.closeFuture();<br>        closeFuture.sync();<br><br>        <span class="hljs-comment">//线程已经关闭</span><br>        System.out.println(<span class="hljs-string">&quot;thread is closed&quot;</span>);<br>        worker.shutdownGracefully();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习二-粘包半包"><a href="#练习二-粘包半包" class="headerlink" title="练习二 粘包半包"></a>练习二 粘包半包</h3><p>通过netty的方式解决粘包和半包的问题</p><h4 id="服务端代码-1"><a href="#服务端代码-1" class="headerlink" title="服务端代码"></a>服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>            serverBootstrap.channel(NioServerSocketChannel.class);<br>            <span class="hljs-comment">//设置系统接收缓冲区大小，复显半包的问题</span><br>            <span class="hljs-comment">//serverBootstrap.option(ChannelOption.SO_RCVBUF,10);</span><br>            <span class="hljs-comment">//serverBootstrap.option(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(10));</span><br><br>            <span class="hljs-comment">//设置netty的缓冲区大小</span><br>            <span class="hljs-comment">//serverBootstrap.childOption(ChannelOption.RCVBUF_ALLOCATOR,new AdaptiveRecvByteBufAllocator(16,16,16));</span><br>            <br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> &#123;<br>                    ch.pipeline().addLast(worker,<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.INFO));<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-comment">// 连接建立时会执行该方法</span><br>                            <span class="hljs-built_in">super</span>.channelActive(ctx);<br>                        &#125;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelInactive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-comment">// 连接断开时会执行该方法</span><br>                            <span class="hljs-built_in">super</span>.channelInactive(ctx);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> serverBootstrap.bind(<span class="hljs-number">8080</span>);<br>            channelFuture.sync();<br>            <span class="hljs-comment">// 关闭channel</span><br>            channelFuture.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;server error&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Server</span>().start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端代码-2"><a href="#客户端代码-2" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>()&#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                             分十次每次发送十个字节</span><br><span class="hljs-comment">                             期望服务端每次收到16个字节，一共收到十次</span><br><span class="hljs-comment">                             但是实际情况是服务端一次收到了160个字节</span><br><span class="hljs-comment">                             */</span><br>                            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                                <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> ctx.alloc().buffer(<span class="hljs-number">16</span>);<br>                                byteBuf.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>&#125;);<br>                                ctx.writeAndFlush(byteBuf);<br><br>                            &#125;<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;client error&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="粘包现象"><a href="#粘包现象" class="headerlink" title="粘包现象"></a>粘包现象</h4><p>客户端向服务端发送十次数据，一次16个字节，原本期望的情况是，服务端接收到十次，每次16字节，但是实际情况是服务端一次就接收到了160个字节，这就是粘包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">21</span>:<span class="hljs-number">51</span> AM io.netty.handler.logging.LoggingHandler channelRegistered<br>INFO: [id: <span class="hljs-number">0xd5093bd0</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57243</span>] REGISTERED<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">21</span>:<span class="hljs-number">51</span> AM io.netty.handler.logging.LoggingHandler channelActive<br>INFO: [id: <span class="hljs-number">0xd5093bd0</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57243</span>] ACTIVE<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">21</span>:<span class="hljs-number">51</span> AM io.netty.handler.logging.LoggingHandler channelRead<br>INFO: [id: <span class="hljs-number">0xd5093bd0</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57243</span>] READ: 160B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000010</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000020</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000030</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000040</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000050</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000060</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000070</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|00000080| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|00000090| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>+--------+-------------------------------------------------+----------------+<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">21</span>:<span class="hljs-number">51</span> AM io.netty.handler.logging.LoggingHandler channelReadComplete<br>INFO: [id: <span class="hljs-number">0xd5093bd0</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57243</span>] READ COMPLETE<br><br></code></pre></td></tr></table></figure><h4 id="半包现象"><a href="#半包现象" class="headerlink" title="半包现象"></a>半包现象</h4><p>通过设置接收缓冲区的大小，从而限制接收方一次接收到的最大数据量，从而会对发送方的数据产生截断，这就是半包现象，只要使用TCP传输协议就一定会产生半包问题，而UDP不会</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>设置接收缓冲区大小，复显半包的问题<br><span class="hljs-regexp">//</span>serverBootstrap.option(ChannelOption.SO_RCVBUF,<span class="hljs-number">10</span>);<br>serverBootstrap.option(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(<span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><h4 id="现象分析"><a href="#现象分析" class="headerlink" title="现象分析"></a>现象分析</h4><p><strong>粘包</strong></p><ul><li><p>现象</p><ul><li>发送 abc def，接收 abcdef</li></ul></li><li><p>原因</p><ul><li><p>应用层</p><ul><li>接收方 ByteBuf 设置太大（Netty 默认 1024）</li></ul></li><li><p>传输层-网络层</p><ul><li>滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且<strong>窗口大小足够大（大于256 bytes），这 256 bytes 字节就会缓冲在接收方的滑动窗口中，</strong> 当滑动窗口中缓冲了多个报文就会粘包</li><li>Nagle 算法：会造成粘包</li></ul></li></ul></li></ul><p><strong>半包</strong></p><ul><li><p>现象</p><ul><li>发送 abcdef，接收 abc def</li></ul></li><li><p>原因</p><ul><li><p>应用层</p><ul><li>接收方 ByteBuf 小于实际发送数据量</li></ul></li><li><p>传输层-网络层</p><ul><li>滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时<strong>接收方窗口中无法容纳发送方的全部报文，发送方只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包</strong></li></ul></li><li><p>数据链路层</p><ul><li>MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包</li></ul></li></ul></li></ul><h4 id="解决方案一-短连接"><a href="#解决方案一-短连接" class="headerlink" title="解决方案一 短连接"></a>解决方案一 短连接</h4><p><strong>客户端每次向服务器发送数据以后，就与服务器断开连接，此时的消息边界为连接建立到连接断开</strong>。这时便无需使用滑动窗口等技术来缓冲数据，则不会发生粘包现象。但如果一次性数据发送过多，接收方无法一次性容纳所有数据，还是会发生半包现象，所以<strong>短链接无法解决半包现象</strong></p><h5 id="短连接客户端代码"><a href="#短连接客户端代码" class="headerlink" title="短连接客户端代码"></a>短连接客户端代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过短连接的方式解决粘包问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShortConnectClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span> ; i++) &#123;<br>            send();<br>            <span class="hljs-comment">//使发送变得有序</span><br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> ctx.alloc().buffer(<span class="hljs-number">16</span>);<br>                            byteBuf.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>&#125;);<br>                            ctx.writeAndFlush(byteBuf);<br>                            ctx.channel().close();<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;client error&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">41</span> AM io.netty.handler.logging.LoggingHandler channelRegistered<br>INFO: [id: <span class="hljs-number">0x4f7f1e6b</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57699</span>] REGISTERED<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">41</span> AM io.netty.handler.logging.LoggingHandler channelActive<br>INFO: [id: <span class="hljs-number">0x4f7f1e6b</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57699</span>] ACTIVE<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">41</span> AM io.netty.handler.logging.LoggingHandler channelRead<br>INFO: [id: <span class="hljs-number">0x4f7f1e6b</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57699</span>] READ: 16B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>+--------+-------------------------------------------------+----------------+<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">41</span> AM io.netty.handler.logging.LoggingHandler channelReadComplete<br>INFO: [id: <span class="hljs-number">0x4f7f1e6b</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57699</span>] READ COMPLETE<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">41</span> AM io.netty.handler.logging.LoggingHandler channelReadComplete<br>INFO: [id: <span class="hljs-number">0x4f7f1e6b</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57699</span>] READ COMPLETE<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">41</span> AM io.netty.handler.logging.LoggingHandler channelInactive<br>INFO: [id: <span class="hljs-number">0x4f7f1e6b</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> ! R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57699</span>] INACTIVE<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">41</span> AM io.netty.handler.logging.LoggingHandler channelUnregistered<br>INFO: [id: <span class="hljs-number">0x4f7f1e6b</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> ! R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57699</span>] UNREGISTERED<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">42</span> AM io.netty.handler.logging.LoggingHandler channelRegistered<br>INFO: [id: <span class="hljs-number">0xb3ce3bc9</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57700</span>] REGISTERED<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">42</span> AM io.netty.handler.logging.LoggingHandler channelActive<br>INFO: [id: <span class="hljs-number">0xb3ce3bc9</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57700</span>] ACTIVE<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">42</span> AM io.netty.handler.logging.LoggingHandler channelRead<br>INFO: [id: <span class="hljs-number">0xb3ce3bc9</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57700</span>] READ: 16B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>+--------+-------------------------------------------------+----------------+<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">42</span> AM io.netty.handler.logging.LoggingHandler channelReadComplete<br>INFO: [id: <span class="hljs-number">0xb3ce3bc9</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57700</span>] READ COMPLETE<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">42</span> AM io.netty.handler.logging.LoggingHandler channelReadComplete<br>INFO: [id: <span class="hljs-number">0xb3ce3bc9</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57700</span>] READ COMPLETE<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">42</span> AM io.netty.handler.logging.LoggingHandler channelInactive<br>INFO: [id: <span class="hljs-number">0xb3ce3bc9</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> ! R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57700</span>] INACTIVE<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">10</span>:<span class="hljs-number">56</span>:<span class="hljs-number">42</span> AM io.netty.handler.logging.LoggingHandler channelUnregistered<br>INFO: [id: <span class="hljs-number">0xb3ce3bc9</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> ! R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57700</span>] UNREGISTERED<br>...<br></code></pre></td></tr></table></figure><h4 id="解决方案二-定长解码器"><a href="#解决方案二-定长解码器" class="headerlink" title="解决方案二 定长解码器"></a>解决方案二 定长解码器</h4><p>客户端与服务器<strong>约定一个最大长度，保证客户端每次发送的数据长度都不会大于该长度</strong>。若发送数据长度不足则需要<strong>补齐</strong>至该长度<br>服务器接收数据时，<strong>将接收到的数据按照约定的最大长度进行拆分</strong>，即使发送过程中产生了粘包，也可以通过定长解码器将数据正确地进行拆分。<strong>服务端需要用到<code>FixedLengthFrameDecoder</code>对数据进行定长解码</strong></p><h5 id="定长解码服务端代码"><a href="#定长解码服务端代码" class="headerlink" title="定长解码服务端代码"></a>定长解码服务端代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FixedLengthServer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>            serverBootstrap.channel(NioServerSocketChannel.class);;<br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> &#123;<br>                    <span class="hljs-comment">//通过定长解码器规定最大消息长度为10</span><br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FixedLengthFrameDecoder</span>(<span class="hljs-number">16</span>));<br>                    ch.pipeline().addLast(worker,<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.INFO));<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-comment">// 连接建立时会执行该方法</span><br>                            <span class="hljs-built_in">super</span>.channelActive(ctx);<br>                        &#125;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelInactive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-comment">// 连接断开时会执行该方法</span><br>                            <span class="hljs-built_in">super</span>.channelInactive(ctx);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> serverBootstrap.bind(<span class="hljs-number">8080</span>);<br>            channelFuture.sync();<br>            <span class="hljs-comment">// 关闭channel</span><br>            channelFuture.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;server error&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FixedLengthServer</span>().start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="定长解码器客户端代码"><a href="#定长解码器客户端代码" class="headerlink" title="定长解码器客户端代码"></a>定长解码器客户端代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FixedLengthClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        send();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-comment">// 约定最大长度为16</span><br>                            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>                            <span class="hljs-comment">// 被发送的数据</span><br>                            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>                            <span class="hljs-comment">// 向服务器发送10个报文</span><br>                            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                                <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ctx.alloc().buffer(maxLength);<br>                                <span class="hljs-comment">// 定长byte数组，未使用部分会以0进行填充</span><br>                                <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[maxLength];<br>                                <span class="hljs-comment">// 生成长度为0~15的数据</span><br>                                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; (<span class="hljs-type">int</span>) (Math.random() * (maxLength - <span class="hljs-number">1</span>)); j++) &#123;<br>                                    bytes[j] = (<span class="hljs-type">byte</span>) c;<br>                                &#125;<br>                                buffer.writeBytes(bytes);<br>                                c++;<br>                                <span class="hljs-comment">// 将数据发送给服务器</span><br>                                ctx.writeAndFlush(buffer);<br>                            &#125;<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;client error&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">INFO: [id: <span class="hljs-number">0x856d9368</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57793</span>] READ: 16B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">61</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> |a...............|<br>+--------+-------------------------------------------------+----------------+<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">11</span>:<span class="hljs-number">11</span>:<span class="hljs-number">21</span> AM io.netty.handler.logging.LoggingHandler channelRead<br>INFO: [id: <span class="hljs-number">0x856d9368</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">57793</span>] READ: 16B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> |bbbb............|<br>+--------+-------------------------------------------------+----------------+<br>...<br></code></pre></td></tr></table></figure><h4 id="解决方案三-LTC长度字段解码器"><a href="#解决方案三-LTC长度字段解码器" class="headerlink" title="解决方案三 LTC长度字段解码器"></a>解决方案三 LTC长度字段解码器</h4><p>在传送数据时可以在数据中<strong>添加一个用于表示有用数据长度的字段</strong>，在解码时读取出这个用于表明长度的字段，同时读取其他相关参数，即可知道最终需要的数据是什么样子的</p><p><code>LengthFieldBasedFrameDecoder</code>解码器可以提供更为丰富的拆分方法，其构造方法有五个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">LengthFieldBasedFrameDecoder</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">int</span> maxFrameLength,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> lengthFieldOffset, <span class="hljs-type">int</span> lengthFieldLength,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> lengthAdjustment, <span class="hljs-type">int</span> initialBytesToStrip)</span>Copy<br></code></pre></td></tr></table></figure><p><strong>参数解析</strong></p><ul><li><p>maxFrameLength 数据最大长度</p><ul><li>表示数据的最大长度（包括附加信息、长度标识等内容）</li></ul></li><li><p>lengthFieldOffset <strong>数据长度标识的起始偏移量</strong></p><ul><li>用于指明数据第几个字节开始是用于标识有用字节长度的，因为前面可能还有其他附加信息</li></ul></li><li><p>lengthFieldLength <strong>数据长度标识所占字节数</strong>（用于指明有用数据的长度）</p><ul><li>数据中用于表示有用数据长度的标识所占的字节数</li></ul></li><li><p>lengthAdjustment <strong>长度表示与有用数据的偏移量</strong></p><ul><li>用于指明数据长度标识和有用数据之间的距离，因为两者之间还可能有附加信息</li></ul></li><li><p>initialBytesToStrip <strong>数据读取起点</strong></p><ul><li>读取起点，<strong>不读取</strong> 0 ~ initialBytesToStrip 之间的数据</li></ul></li></ul><p><strong>参数图解</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210425200007.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67cbff78c2d0455eb4932ba8a38c1717~tplv-k3u1fbpfcp-zoom-1.image"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">lengthFieldOffset   = <span class="hljs-number">0</span><br>lengthFieldLength   = <span class="hljs-number">2</span><br>lengthAdjustment    = <span class="hljs-number">0</span><br>initialBytesToStrip = <span class="hljs-number">0</span> (= <span class="hljs-keyword">do</span> not strip header)<br>  <br>BEFORE <span class="hljs-title function_">DECODE</span> <span class="hljs-params">(<span class="hljs-number">14</span> bytes)</span>         AFTER <span class="hljs-title function_">DECODE</span> <span class="hljs-params">(<span class="hljs-number">14</span> bytes)</span><br>+--------+----------------+      +--------+----------------+<br>| Length | Actual Content |-----&gt;| Length | Actual Content |<br>| <span class="hljs-number">0x000C</span> | <span class="hljs-string">&quot;HELLO, WORLD&quot;</span> |      | <span class="hljs-number">0x000C</span> | <span class="hljs-string">&quot;HELLO, WORLD&quot;</span> |<br>+--------+----------------+      +--------+----------------+Copy<br></code></pre></td></tr></table></figure><p>从0开始即为长度标识，长度标识长度为2个字节</p><p><strong>0x000C</strong> 即为后面 <code>HELLO, WORLD</code>的长度</p><hr><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">lengthFieldOffset   = 0<br>lengthFieldLength   = 2<br>lengthAdjustment    = 0<br>initialBytesToStrip = 2 (= the length of the Length field)<br>  <br>BEFORE DECODE (14 bytes)         AFTER DECODE (12 bytes)<br>+--------+----------------+      +----------------+<br>|<span class="hljs-string"> Length </span>|<span class="hljs-string"> Actual Content </span>|<span class="hljs-string">-----&gt;</span>|<span class="hljs-string"> Actual Content </span>|<br>|<span class="hljs-string"> 0x000C </span>|<span class="hljs-string"> &quot;HELLO, WORLD&quot; </span>|<span class="hljs-string">      </span>|<span class="hljs-string"> &quot;HELLO, WORLD&quot; </span>|<br>+--------+----------------+      +----------------+Copy<br></code></pre></td></tr></table></figure><p>从0开始即为长度标识，长度标识长度为2个字节，<strong>读取时从第二个字节开始读取</strong>（此处即跳过长度标识）</p><p>因为<strong>跳过了用于表示长度的2个字节</strong>，所以此处直接读取<code>HELLO, WORLD</code></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">lengthFieldOffset   = <span class="hljs-number">2</span> (= the length of Header <span class="hljs-number">1</span>)<br>lengthFieldLength   = <span class="hljs-number">3</span><br>lengthAdjustment    = <span class="hljs-number">0</span><br>initialBytesToStrip = <span class="hljs-number">0</span><br>  <br>BEFORE <span class="hljs-title function_">DECODE</span> <span class="hljs-params">(<span class="hljs-number">17</span> bytes)</span>                      AFTER <span class="hljs-title function_">DECODE</span> <span class="hljs-params">(<span class="hljs-number">17</span> bytes)</span><br>+----------+----------+----------------+      +----------+----------+----------------+<br>| Header <span class="hljs-number">1</span> |  Length  | Actual Content |-----&gt;| Header <span class="hljs-number">1</span> |  Length  | Actual Content |<br>|  <span class="hljs-number">0xCAFE</span>  | <span class="hljs-number">0x00000C</span> | <span class="hljs-string">&quot;HELLO, WORLD&quot;</span> |      |  <span class="hljs-number">0xCAFE</span>  | <span class="hljs-number">0x00000C</span> | <span class="hljs-string">&quot;HELLO, WORLD&quot;</span> |<br>+----------+----------+----------------+      +----------+----------+----------------+Copy<br></code></pre></td></tr></table></figure><p>长度标识<strong>前面还有2个字节的其他内容</strong>（0xCAFE），第三个字节开始才是长度标识，长度表示长度为3个字节(0x00000C)</p><p>Header1中有附加信息，<strong>读取长度标识时需要跳过这些附加信息来获取长度</strong></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">lengthFieldOffset   = <span class="hljs-number">0</span><br>lengthFieldLength   = <span class="hljs-number">3</span><br>lengthAdjustment    = <span class="hljs-number">2</span> (= the length of Header <span class="hljs-number">1</span>)<br>initialBytesToStrip = <span class="hljs-number">0</span><br>  <br>BEFORE <span class="hljs-title function_">DECODE</span> <span class="hljs-params">(<span class="hljs-number">17</span> bytes)</span>                      AFTER <span class="hljs-title function_">DECODE</span> <span class="hljs-params">(<span class="hljs-number">17</span> bytes)</span><br>+----------+----------+----------------+      +----------+----------+----------------+<br>|  Length  | Header <span class="hljs-number">1</span> | Actual Content |-----&gt;|  Length  | Header <span class="hljs-number">1</span> | Actual Content |<br>| <span class="hljs-number">0x00000C</span> |  <span class="hljs-number">0xCAFE</span>  | <span class="hljs-string">&quot;HELLO, WORLD&quot;</span> |      | <span class="hljs-number">0x00000C</span> |  <span class="hljs-number">0xCAFE</span>  | <span class="hljs-string">&quot;HELLO, WORLD&quot;</span> |<br>+----------+----------+----------------+      +----------+----------+----------------+Copy<br></code></pre></td></tr></table></figure><p>从0开始即为长度标识，长度标识长度为3个字节，<strong>长度标识之后还有2个字节的其他内容</strong>（0xCAFE）</p><p>长度标识(0x00000C)表示的是**从其后lengthAdjustment（2个字节）开始的数据的长度，即<code>HELLO, WORLD</code>**，不包括0xCAFE</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">lengthFieldOffset   = <span class="hljs-number">1</span> (= the length of HDR1)<br>lengthFieldLength   = <span class="hljs-number">2</span><br>lengthAdjustment    = <span class="hljs-number">1</span> (= the length of HDR2)<br>initialBytesToStrip = <span class="hljs-number">3</span> (= the length of HDR1 + LEN)<br>  <br>BEFORE <span class="hljs-title function_">DECODE</span> <span class="hljs-params">(<span class="hljs-number">16</span> bytes)</span>                       AFTER <span class="hljs-title function_">DECODE</span> <span class="hljs-params">(<span class="hljs-number">13</span> bytes)</span><br>+------+--------+------+----------------+      +------+----------------+<br>| HDR1 | Length | HDR2 | Actual Content |-----&gt;| HDR2 | Actual Content |<br>| <span class="hljs-number">0xCA</span> | <span class="hljs-number">0x000C</span> | <span class="hljs-number">0xFE</span> | <span class="hljs-string">&quot;HELLO, WORLD&quot;</span> |      | <span class="hljs-number">0xFE</span> | <span class="hljs-string">&quot;HELLO, WORLD&quot;</span> |<br>+------+--------+------+----------------+      +------+----------------+Copy<br></code></pre></td></tr></table></figure><p>长度标识<strong>前面有1个字节的其他内容，后面也有1个字节的其他内容，读取时从长度标识之后3个字节处开始读取</strong>，即读取 <code>0xFE HELLO, WORLD</code></p><h5 id="客户端代码-3"><a href="#客户端代码-3" class="headerlink" title="客户端代码"></a>客户端代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LengthFieldDecoder</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 模拟服务器</span><br>        <span class="hljs-comment">// 使用EmbeddedChannel测试handler</span><br>        <span class="hljs-type">EmbeddedChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedChannel</span>(<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                   数据最大长度为1KB，长度标识前后各有1个字节的附加信息，长度标识长度为4个字节（int）</span><br><span class="hljs-comment">                   只获取其中的message信息 其他不需要</span><br><span class="hljs-comment">                   数据实际为</span><br><span class="hljs-comment">                            +-------------------------------------------------+</span><br><span class="hljs-comment">                                     |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-comment">                            +--------+-------------------------------------------------+----------------+</span><br><span class="hljs-comment">                            |00000000| ca 00 00 00 05 fe 57 6f 72 6c 64                |......World     |</span><br><span class="hljs-comment">                            +--------+-------------------------------------------------+----------------+</span><br><span class="hljs-comment">                            0的位置是长度前的信息，占位一个字节，所以lengthFieldOffset需要设置为1，从1的位置开始读取信息长度</span><br><span class="hljs-comment">                            1-4是长度信息，int类型占位四个字节，所以lengthFieldLength需要设置为4</span><br><span class="hljs-comment">                            5的位置为实际信息前的额外数据，所以lengthAdjustment需要设置为1，表明其后1位开始才是实际信息</span><br><span class="hljs-comment">                            6-a的位置是实际信息，如果想解码取出实际信息，initialBytesToStrip设置为6，因为前面的多余信息所占字节数为1+4+1=6</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthFieldBasedFrameDecoder</span>(<span class="hljs-number">1024</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.INFO)<br>        );<br><br>        <span class="hljs-comment">// 模拟客户端，写入数据</span><br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.buffer();<br>        send(buffer, <span class="hljs-string">&quot;Helloooooooo&quot;</span>);<br>        channel.writeInbound(buffer);<br>        send(buffer, <span class="hljs-string">&quot;World&quot;</span>);<br>        channel.writeInbound(buffer);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(ByteBuf buf, String msg)</span> &#123;<br>        <span class="hljs-comment">// 得到数据的长度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> msg.length();<br>        <span class="hljs-type">byte</span>[] bytes = msg.getBytes(StandardCharsets.UTF_8);<br>        <span class="hljs-comment">// 将数据信息写入buf</span><br>        <span class="hljs-comment">// 写入长度标识前的其他信息 占一个字节</span><br>        buf.writeByte(<span class="hljs-number">0xCA</span>);<br>        <span class="hljs-comment">// 写入数据长度标识 一个int占四个字节</span><br>        buf.writeInt(length);<br>        <span class="hljs-comment">// 写入长度标识后的其他信息 占一个字节</span><br>        buf.writeByte(<span class="hljs-number">0xFE</span>);<br>        <span class="hljs-comment">// 写入具体的数据</span><br>        buf.writeBytes(bytes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">INFO: [id: 0xembedded, L:embedded - R:embedded] READ: 12B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">48</span> <span class="hljs-number">65</span> 6c 6c <span class="hljs-number">6f</span> <span class="hljs-number">6f</span> <span class="hljs-number">6f</span> <span class="hljs-number">6f</span> <span class="hljs-number">6f</span> <span class="hljs-number">6f</span> <span class="hljs-number">6f</span> <span class="hljs-number">6f</span>             |Helloooooooo    |<br>+--------+-------------------------------------------------+----------------+<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">2</span>:<span class="hljs-number">00</span>:<span class="hljs-number">15</span> PM io.netty.handler.logging.LoggingHandler channelReadComplete<br>INFO: [id: 0xembedded, L:embedded - R:embedded] READ COMPLETE<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">2</span>:<span class="hljs-number">00</span>:<span class="hljs-number">15</span> PM io.netty.handler.logging.LoggingHandler channelRead<br>INFO: [id: 0xembedded, L:embedded - R:embedded] READ: 5B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">57</span> <span class="hljs-number">6f</span> <span class="hljs-number">72</span> 6c <span class="hljs-number">64</span>                                  |World           |<br>+--------+-------------------------------------------------+----------------+<br></code></pre></td></tr></table></figure><h4 id="问题1-系统缓冲区大小设置无效"><a href="#问题1-系统缓冲区大小设置无效" class="headerlink" title="问题1.系统缓冲区大小设置无效"></a>问题1.系统缓冲区大小设置无效</h4><p>原想通过以下代码，强行设置系统接收缓冲区的大小为10，从而复现半包的问题，但是实际发现并不可行，其原因是<a href="https://github.com/netty/netty/issues/6832">issue</a>，由于不同os的差异，实际上这个参数未必会和设置的一样，最终缓冲区大小还是由os决定的，netty的默认大小是1024B。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">serverBootstrap.option(ChannelOption.SO_RCVBUF,<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">serverBootstrap.option(ChannelOption.RCVBUF_ALLOCATOR,<span class="hljs-keyword">new</span> <span class="hljs-title class_">FixedRecvByteBufAllocator</span>(<span class="hljs-number">8</span>));<br></code></pre></td></tr></table></figure><h3 id="练习三-协议设计与解析"><a href="#练习三-协议设计与解析" class="headerlink" title="练习三 协议设计与解析"></a>练习三 协议设计与解析</h3><h4 id="Redis协议"><a href="#Redis协议" class="headerlink" title="Redis协议"></a>Redis协议</h4><p>如果我们要向Redis服务器发送一条<code>set name TianLe Zhou</code>的指令，需要遵守如下协议</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 代表该指令一共有<span class="hljs-number">3</span>部分，每条指令之后都要添加回车与换行符<br>*<span class="hljs-number">3</span>\r\n<br><span class="hljs-regexp">//</span> 第一个指令的长度是<span class="hljs-number">3</span><br><span class="hljs-variable">$3</span>\r\n<br><span class="hljs-regexp">//</span> 第一个指令是set指令<br>set\r\n<br><span class="hljs-regexp">//</span> 下面的指令以此类推<br><span class="hljs-variable">$4</span>\r\n<br>name\r\n<br><span class="hljs-variable">$11</span>\r\n<br>TianLe Zhou\r\n<br></code></pre></td></tr></table></figure><h5 id="客户端代码-4"><a href="#客户端代码-4" class="headerlink" title="客户端代码"></a>客户端代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisClient</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        *3</span><br><span class="hljs-comment">        $3</span><br><span class="hljs-comment">        set</span><br><span class="hljs-comment">        $4</span><br><span class="hljs-comment">        name</span><br><span class="hljs-comment">        $11</span><br><span class="hljs-comment">        TianLe Zhou</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] FORMAT = <span class="hljs-string">&quot;\r\n&quot;</span>.getBytes();<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(worker,<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.INFO));<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>()&#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ctx.alloc().buffer();<br>                            buffer.writeBytes(<span class="hljs-string">&quot;*3&quot;</span>.getBytes());<br>                            buffer.writeBytes(FORMAT);<br><br>                            buffer.writeBytes(<span class="hljs-string">&quot;$3&quot;</span>.getBytes());<br>                            buffer.writeBytes(FORMAT);<br>                            buffer.writeBytes(<span class="hljs-string">&quot;set&quot;</span>.getBytes());<br>                            buffer.writeBytes(FORMAT);<br><br>                            buffer.writeBytes(<span class="hljs-string">&quot;$4&quot;</span>.getBytes());<br>                            buffer.writeBytes(FORMAT);<br>                            buffer.writeBytes(<span class="hljs-string">&quot;name&quot;</span>.getBytes());<br>                            buffer.writeBytes(FORMAT);<br><br>                            buffer.writeBytes(<span class="hljs-string">&quot;$11&quot;</span>.getBytes());<br>                            buffer.writeBytes(FORMAT);<br>                            buffer.writeBytes(<span class="hljs-string">&quot;TianLe Zhou&quot;</span>.getBytes());<br>                            buffer.writeBytes(FORMAT);<br><br>                            <span class="hljs-comment">// 发送命令给Redis执行</span><br>                            ctx.channel().writeAndFlush(buffer);<br>                        &#125;<br><br>                        <span class="hljs-comment">//获取Redis返回的结果</span><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> (ByteBuf) msg;<br>                            System.out.println(buf.toString(Charset.defaultCharset()));<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">// 连接到redis</span><br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6379</span>)).sync();<br>            channelFuture.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;client error&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">INFO: [id: <span class="hljs-number">0xd679c3af</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">59257</span> - R:localhost/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>] WRITE: 41B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| 2a <span class="hljs-number">33</span> <span class="hljs-number">0d</span> 0a <span class="hljs-number">24</span> <span class="hljs-number">33</span> <span class="hljs-number">0d</span> 0a <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">74</span> <span class="hljs-number">0d</span> 0a <span class="hljs-number">24</span> <span class="hljs-number">34</span> <span class="hljs-number">0d</span> |*<span class="hljs-number">3.</span>.$<span class="hljs-number">3.</span>.set..$<span class="hljs-number">4.</span>|<br>|<span class="hljs-number">00000010</span>| 0a 6e <span class="hljs-number">61</span> <span class="hljs-number">6d</span> <span class="hljs-number">65</span> <span class="hljs-number">0d</span> 0a <span class="hljs-number">24</span> <span class="hljs-number">31</span> <span class="hljs-number">31</span> <span class="hljs-number">0d</span> 0a <span class="hljs-number">54</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6e |.name..$<span class="hljs-number">11.</span>.Tian|<br>|<span class="hljs-number">00000020</span>| 4c <span class="hljs-number">65</span> <span class="hljs-number">20</span> 5a <span class="hljs-number">68</span> <span class="hljs-number">6f</span> <span class="hljs-number">75</span> <span class="hljs-number">0d</span> 0a                      |Le Zhou..       |<br>+--------+-------------------------------------------------+----------------+<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">2</span>:<span class="hljs-number">26</span>:<span class="hljs-number">19</span> PM io.netty.handler.logging.LoggingHandler flush<br>INFO: [id: <span class="hljs-number">0xd679c3af</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">59257</span> - R:localhost/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>] FLUSH<br>Sep <span class="hljs-number">21</span>, <span class="hljs-number">2022</span> <span class="hljs-number">2</span>:<span class="hljs-number">26</span>:<span class="hljs-number">19</span> PM io.netty.handler.logging.LoggingHandler channelRead<br>INFO: [id: <span class="hljs-number">0xd679c3af</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">59257</span> - R:localhost/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>] READ: 5B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| 2b <span class="hljs-number">4f</span> 4b <span class="hljs-number">0d</span> 0a                                  |+OK..           |<br>+--------+-------------------------------------------------+----------------+<br></code></pre></td></tr></table></figure><h4 id="自定义协议"><a href="#自定义协议" class="headerlink" title="自定义协议"></a>自定义协议</h4><h5 id="组成要素"><a href="#组成要素" class="headerlink" title="组成要素"></a>组成要素</h5><ul><li><p><strong>魔数</strong>：作为判定协议是否有效的依据，例如Java起始字节码是CAFEBABE</p></li><li><p><strong>版本号</strong>：可以支持协议的升级</p></li><li><p><strong>序列化算法</strong>：消息正文到底采用哪种序列化反序列化方式</p><ul><li>如：json、protobuf、hessian、jdk</li></ul></li><li><p><strong>指令类型</strong>：与业务相关</p></li><li><p><strong>请求序号</strong>：为了双工通信，提供异步能力</p></li><li><p><strong>正文长度</strong></p></li><li><p><strong>消息正文</strong>：序列化，一般是json</p></li></ul><h5 id="自定义编解码协议实现"><a href="#自定义编解码协议实现" class="headerlink" title="自定义编解码协议实现"></a>自定义编解码协议实现</h5><p><strong>编解码器代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过泛型制定编解码的对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageCodec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ByteToMessageCodec</span>&lt;Message&gt; &#123;<br><br>    <span class="hljs-comment">//出栈时进行编码</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(ChannelHandlerContext ctx, Message msg, ByteBuf out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//魔数 BAKAZHOU 占八个字节</span><br>        out.writeBytes(<span class="hljs-string">&quot;BAKAZHOU&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">//版本 1 占四个字节</span><br>        out.writeInt(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//序列化算法  0代表Json 1代表jdk 占四个字节</span><br>        out.writeInt(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">//指令类型 int类型占四个字节</span><br>        out.writeInt(msg.getMessageType());<br><br>        <span class="hljs-comment">//请求序号 占四个字节</span><br>        out.writeInt(msg.getSequenceId());<br><br>        <span class="hljs-comment">//将消息正文站位bytes</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>        oos.writeObject(msg);<br>        <span class="hljs-type">byte</span>[] msgBytes = bos.toByteArray();<br><br>        <span class="hljs-comment">//正文长度 占四个字节</span><br>        out.writeInt(msgBytes.length);<br><br>        <span class="hljs-comment">//正文前一共有28个字节</span><br>        <span class="hljs-comment">//写入正文</span><br>        out.writeBytes(msgBytes);<br>    &#125;<br><br>    <span class="hljs-comment">//入栈时进行解码</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//魔数 BAKAZHOU 8字节</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">magicNum</span> <span class="hljs-operator">=</span> in.readBytes(<span class="hljs-number">8</span>).toString(Charset.defaultCharset());<br><br>        <span class="hljs-comment">//版本号 4字节</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> in.readInt();<br><br>        <span class="hljs-comment">//序列化算法 </span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">serializationAlgorithm</span> <span class="hljs-operator">=</span> in.readInt();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">messageType</span> <span class="hljs-operator">=</span> in.readInt();<br><br>        <span class="hljs-comment">//请求序号</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sequenceId</span> <span class="hljs-operator">=</span> in.readInt();<br><br>        <span class="hljs-comment">//正文长度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> in.readInt();<br><br>        <span class="hljs-comment">//正文内容</span><br>        <span class="hljs-type">byte</span>[] msg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[length];<br>        in.readBytes(msg,<span class="hljs-number">0</span>,length);<br>        <span class="hljs-comment">//判断序列化方式</span><br>        <span class="hljs-keyword">switch</span> (serializationAlgorithm)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(msg));<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) ois.readObject();<br><br>                <span class="hljs-comment">//传给下一个处理器使用</span><br>                out.add(message);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>编码器与解码器方法源于<strong>父类ByteToMessageCodec</strong>，通过该类可以自定义编码器与解码器，<strong>泛型类型为被编码与被解码的类</strong>。此处使用了自定义类Message，代表消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageCodec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ByteToMessageCodec</span>&lt;Message&gt;Copy<br></code></pre></td></tr></table></figure></li><li><p>编码器<strong>负责将附加信息与正文信息写入到ByteBuf中</strong>，其中附加信息<strong>总字节数最好为2n，不足需要补齐</strong>。正文内容如果为对象，需要通过<strong>序列化</strong>将其放入到ByteBuf中</p></li><li><p>解码器<strong>负责将ByteBuf中的信息取出，并放入List中</strong>，该List用于将信息传递给下一个handler</p></li></ul><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMessageCodec</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MessageCodec</span> <span class="hljs-variable">messageCodec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodec</span>();<br>        <span class="hljs-type">EmbeddedChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedChannel</span>(<br>                <span class="hljs-comment">// 添加解码器，避免粘包半包问题</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthFieldBasedFrameDecoder</span>(<span class="hljs-number">1024</span>, <span class="hljs-number">28</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.INFO),<br>                messageCodec);<br><br>        <span class="hljs-comment">//encode</span><br>        <span class="hljs-type">LoginRequestMessage</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginRequestMessage</span>(<span class="hljs-string">&quot;bakazhou&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        channel.writeOutbound(loginUser);<br><br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.buffer();<br>        System.out.println(byteBuf);<br>        messageCodec.encode(<span class="hljs-literal">null</span>, loginUser, byteBuf);<br>        channel.writeInbound(loginUser);<br>        System.out.println(byteBuf);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">第一行<span class="hljs-number">0</span>-<span class="hljs-number">7</span>的位置即为魔数BAKAZHOU<br>第一行<span class="hljs-number">8</span>-b为版本号<br>....<br>以此类推<br>INFO: [id: 0xembedded, L:embedded - R:embedded] WRITE: 285B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">42</span> <span class="hljs-number">41</span> 4b <span class="hljs-number">41</span> 5a <span class="hljs-number">48</span> <span class="hljs-number">4f</span> <span class="hljs-number">55</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> |BAKAZHOU........|<br>|<span class="hljs-number">00000010</span>| <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">01</span> ac ed <span class="hljs-number">00</span> <span class="hljs-number">05</span> |................|<br>|<span class="hljs-number">00000020</span>| <span class="hljs-number">73</span> <span class="hljs-number">72</span> <span class="hljs-number">00</span> <span class="hljs-number">41</span> <span class="hljs-number">63</span> <span class="hljs-number">6f</span> <span class="hljs-number">6d</span> 2e <span class="hljs-number">63</span> 6e 2e <span class="hljs-number">74</span> <span class="hljs-number">77</span> 2e <span class="hljs-number">67</span> <span class="hljs-number">72</span> |sr.Acom.cn.tw.gr|<br>|<span class="hljs-number">00000030</span>| <span class="hljs-number">61</span> <span class="hljs-number">64</span> <span class="hljs-number">75</span> <span class="hljs-number">61</span> <span class="hljs-number">74</span> <span class="hljs-number">65</span> 2e <span class="hljs-number">62</span> <span class="hljs-number">61</span> 6b <span class="hljs-number">61</span> 7a <span class="hljs-number">68</span> <span class="hljs-number">6f</span> <span class="hljs-number">75</span> 2e |aduate.bakazhou.|<br>|<span class="hljs-number">00000040</span>| <span class="hljs-number">50</span> <span class="hljs-number">72</span> <span class="hljs-number">61</span> <span class="hljs-number">63</span> <span class="hljs-number">74</span> <span class="hljs-number">69</span> <span class="hljs-number">63</span> <span class="hljs-number">65</span> <span class="hljs-number">33</span> 2e <span class="hljs-number">6d</span> <span class="hljs-number">65</span> <span class="hljs-number">73</span> <span class="hljs-number">73</span> <span class="hljs-number">61</span> <span class="hljs-number">67</span> |Practice3.messag|<br>|<span class="hljs-number">00000050</span>| <span class="hljs-number">65</span> 2e 4c <span class="hljs-number">6f</span> <span class="hljs-number">67</span> <span class="hljs-number">69</span> 6e <span class="hljs-number">52</span> <span class="hljs-number">65</span> <span class="hljs-number">71</span> <span class="hljs-number">75</span> <span class="hljs-number">65</span> <span class="hljs-number">73</span> <span class="hljs-number">74</span> <span class="hljs-number">4d</span> <span class="hljs-number">65</span> |e.LoginRequestMe|<br>|<span class="hljs-number">00000060</span>| <span class="hljs-number">73</span> <span class="hljs-number">73</span> <span class="hljs-number">61</span> <span class="hljs-number">67</span> <span class="hljs-number">65</span> <span class="hljs-number">76</span> <span class="hljs-number">36</span> <span class="hljs-number">80</span> <span class="hljs-number">36</span> <span class="hljs-number">45</span> 1a d9 d3 <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">02</span> |ssagev6.6E......|<br>|<span class="hljs-number">00000070</span>| 4c <span class="hljs-number">00</span> 08 <span class="hljs-number">70</span> <span class="hljs-number">61</span> <span class="hljs-number">73</span> <span class="hljs-number">73</span> <span class="hljs-number">77</span> <span class="hljs-number">6f</span> <span class="hljs-number">72</span> <span class="hljs-number">64</span> <span class="hljs-number">74</span> <span class="hljs-number">00</span> <span class="hljs-number">12</span> 4c 6a |L..passwordt..Lj|<br>|00000080| <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-number">2f</span> 6c <span class="hljs-number">61</span> 6e <span class="hljs-number">67</span> <span class="hljs-number">2f</span> <span class="hljs-number">53</span> <span class="hljs-number">74</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> 6e <span class="hljs-number">67</span> 3b |ava/lang/String;|<br>|00000090| 4c <span class="hljs-number">00</span> 08 <span class="hljs-number">75</span> <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> 6e <span class="hljs-number">61</span> <span class="hljs-number">6d</span> <span class="hljs-number">65</span> <span class="hljs-number">71</span> <span class="hljs-number">00</span> 7e <span class="hljs-number">00</span> <span class="hljs-number">01</span> |L..usernameq.~..|<br>|000000a0| <span class="hljs-number">78</span> <span class="hljs-number">72</span> <span class="hljs-number">00</span> <span class="hljs-number">35</span> <span class="hljs-number">63</span> <span class="hljs-number">6f</span> <span class="hljs-number">6d</span> 2e <span class="hljs-number">63</span> 6e 2e <span class="hljs-number">74</span> <span class="hljs-number">77</span> 2e <span class="hljs-number">67</span> <span class="hljs-number">72</span> |xr.5com.cn.tw.gr|<br>|000000b0| <span class="hljs-number">61</span> <span class="hljs-number">64</span> <span class="hljs-number">75</span> <span class="hljs-number">61</span> <span class="hljs-number">74</span> <span class="hljs-number">65</span> 2e <span class="hljs-number">62</span> <span class="hljs-number">61</span> 6b <span class="hljs-number">61</span> 7a <span class="hljs-number">68</span> <span class="hljs-number">6f</span> <span class="hljs-number">75</span> 2e |aduate.bakazhou.|<br>|000000c0| <span class="hljs-number">50</span> <span class="hljs-number">72</span> <span class="hljs-number">61</span> <span class="hljs-number">63</span> <span class="hljs-number">74</span> <span class="hljs-number">69</span> <span class="hljs-number">63</span> <span class="hljs-number">65</span> <span class="hljs-number">33</span> 2e <span class="hljs-number">6d</span> <span class="hljs-number">65</span> <span class="hljs-number">73</span> <span class="hljs-number">73</span> <span class="hljs-number">61</span> <span class="hljs-number">67</span> |Practice3.messag|<br>|000000d0| <span class="hljs-number">65</span> 2e <span class="hljs-number">4d</span> <span class="hljs-number">65</span> <span class="hljs-number">73</span> <span class="hljs-number">73</span> <span class="hljs-number">61</span> <span class="hljs-number">67</span> <span class="hljs-number">65</span> d6 <span class="hljs-number">50</span> c5 <span class="hljs-number">58</span> ac <span class="hljs-number">0f</span> <span class="hljs-number">63</span> |e.Message.P.X..c|<br>|<span class="hljs-number">000000e0</span>| <span class="hljs-number">63</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">49</span> <span class="hljs-number">00</span> 0b <span class="hljs-number">6d</span> <span class="hljs-number">65</span> <span class="hljs-number">73</span> <span class="hljs-number">73</span> <span class="hljs-number">61</span> <span class="hljs-number">67</span> <span class="hljs-number">65</span> <span class="hljs-number">54</span> <span class="hljs-number">79</span> |c...I..messageTy|<br>|000000f0| <span class="hljs-number">70</span> <span class="hljs-number">65</span> <span class="hljs-number">49</span> <span class="hljs-number">00</span> 0a <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">71</span> <span class="hljs-number">75</span> <span class="hljs-number">65</span> 6e <span class="hljs-number">63</span> <span class="hljs-number">65</span> <span class="hljs-number">49</span> <span class="hljs-number">64</span> <span class="hljs-number">78</span> |peI..sequenceIdx|<br>|<span class="hljs-number">00000100</span>| <span class="hljs-number">70</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">74</span> <span class="hljs-number">00</span> <span class="hljs-number">06</span> <span class="hljs-number">31</span> <span class="hljs-number">32</span> <span class="hljs-number">33</span> <span class="hljs-number">34</span> |p........t.<span class="hljs-number">.1234</span>|<br>|<span class="hljs-number">00000110</span>| <span class="hljs-number">35</span> <span class="hljs-number">36</span> <span class="hljs-number">74</span> <span class="hljs-number">00</span> 08 <span class="hljs-number">62</span> <span class="hljs-number">61</span> 6b <span class="hljs-number">61</span> 7a <span class="hljs-number">68</span> <span class="hljs-number">6f</span> <span class="hljs-number">75</span>          |56t..bakazhou   |<br>+--------+-------------------------------------------------+----------------+<br><br><br>PooledUnsafeDirectByteBuf(ridx: <span class="hljs-number">0</span>, widx: <span class="hljs-number">0</span>, cap: <span class="hljs-number">256</span>)<br><span class="hljs-comment">//成功进行了解码buf填充了289</span><br>PooledUnsafeDirectByteBuf(ridx: <span class="hljs-number">0</span>, widx: <span class="hljs-number">289</span>, cap: <span class="hljs-number">512</span>)<br></code></pre></td></tr></table></figure><h3 id="练习四-简易的IM通讯系统"><a href="#练习四-简易的IM通讯系统" class="headerlink" title="练习四 简易的IM通讯系统"></a>练习四 简易的IM通讯系统</h3><h4 id="任务说明"><a href="#任务说明" class="headerlink" title="任务说明"></a>任务说明</h4><p>实现一个简单的IM通讯系统，包括用户的登录，用户间的消息收发，用户群组间的消息收发，以及群组相关的系列操作，例如创建群聊，加入群聊，退出群聊等</p><h4 id="基本架构图"><a href="#基本架构图" class="headerlink" title="基本架构图"></a>基本架构图</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ad415e153b84c808f3efd7d11418887~tplv-k3u1fbpfcp-watermark.image" alt="基本架构.png"></p><h4 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h4><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e63b2be93a448ca838577fc5d6e674d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li><strong>client:</strong> 与客户端相关的文件</li><li><strong>command:</strong> 客户端的所有基本操作指令</li><li><strong>message:</strong> 所有类型的请求信息和返回信息</li><li><strong>protocol:</strong> 自定义编解码器</li><li><strong>server:</strong> 与服务端相关的文件</li><li><strong>handler:</strong> 服务端处理入栈请求的处理器</li><li><strong>session:</strong> 缓存用户与channel的关系，用户与群组之间的关系</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p><a href="https://github.com/bakazhou/JUC/tree/master/NettyDemo/src/main/java/com/cn/tw/graduate/bakazhou/Practice3">git repository</a> practice3模块为具体实现代码</p>]]></content>
    
    
    <categories>
      
      <category>Java网络编程</category>
      
      <category>Netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NIO网络通信</title>
    <link href="/2022/09/24/NIO%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    <url>/2022/09/24/NIO%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h1><ul><li>Oracle官方文档:<a href="https://docs.oracle.com/javase/8/docs/api/java/nio/package-summary.html">https://docs.oracle.com/javase/8/docs/api/java/nio/package-summary.html</a></li><li>Practice Repository:<a href="https://github.com/bakazhou/JUC">https://github.com/bakazhou/JUC</a></li></ul><h1 id="NIO-非阻塞IO-基础"><a href="#NIO-非阻塞IO-基础" class="headerlink" title="NIO(非阻塞IO)基础"></a>NIO(非阻塞IO)基础</h1><h2 id="1-三大组件"><a href="#1-三大组件" class="headerlink" title="1.三大组件"></a>1.三大组件</h2><h3 id="1-1-Channel-amp-Buffer"><a href="#1-1-Channel-amp-Buffer" class="headerlink" title="1.1 Channel &amp; Buffer"></a>1.1 Channel &amp; Buffer</h3><p>channel与buffer是<code>双向通道</code>，可以从channel将数据读入buffer，也可以将buffer数据写入channel<br>常见的channel:</p><ul><li>File Channel</li><li>Datagram Channel</li><li>Socket Channel</li><li>Server Socket Channel</li></ul><p>常用的buffer:</p><ul><li>ByteBuffer(以下三种均属于ByteBuffer)</li><li>MapperByteBuffer</li><li>DirectByteBuffer</li><li>HeapByteBuffer</li></ul><h3 id="1-2-Selector"><a href="#1-2-Selector" class="headerlink" title="1.2 Selector"></a>1.2 Selector</h3><h4 id="传统通信设计"><a href="#传统通信设计" class="headerlink" title="传统通信设计"></a>传统通信设计</h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c2fd018da4f4b11a3e497562afa00d9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c620117b0c24dd4a97a7df9ff4a1db1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="Selector设计"><a href="#Selector设计" class="headerlink" title="Selector设计"></a>Selector设计</h4><p>selector的作用是配合一个线程管理多个channel，获取channel上发生的事件，channel工作在非阻塞模式下，当channel发生了读写就绪事件，selector会将事件交给thread进行处理</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/935fa244f6e748759a060eee21bb5ba1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="2-ByteBuffer"><a href="#2-ByteBuffer" class="headerlink" title="2.ByteBuffer"></a>2.ByteBuffer</h2><h3 id="2-1-ByteBuffer基本使用"><a href="#2-1-ByteBuffer基本使用" class="headerlink" title="2.1 ByteBuffer基本使用"></a>2.1 ByteBuffer基本使用</h3><p>有一普通文本文件data.txt，内容为如下，读取其中数据并组成字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">1234567890abcd<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldReturnStringWhenReadData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//File Channel</span><br>    <span class="hljs-comment">//通过输入输出流</span><br>    <span class="hljs-keyword">try</span>(<span class="hljs-type">FileChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src/data.txt&quot;</span>).getChannel()) &#123;<br>        <span class="hljs-comment">//准备缓冲区</span><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br><br>        <span class="hljs-comment">//从Channel读取，向Buffer写入</span><br>        <span class="hljs-keyword">while</span> (channel.read(buffer) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//切换到buffer的读模式</span><br>            buffer.flip();<br>            <span class="hljs-keyword">while</span> (buffer.hasRemaining())&#123;<br>                <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> buffer.get();<br>                stringBuilder.append((<span class="hljs-type">char</span>) b);<br>            &#125;<br><br>            <span class="hljs-comment">//切换到写模式</span><br>            buffer.clear();<br>        &#125;<br><br>        Assertions.assertEquals(<span class="hljs-string">&quot;1234567890abcd&quot;</span>,stringBuilder.toString());<br><br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-Buffer结构"><a href="#2-2-Buffer结构" class="headerlink" title="2.2 Buffer结构"></a>2.2 Buffer结构</h3><p>字节缓冲区的父类Buffer中有几个核心属性，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Invariants: mark &lt;= position &lt;= limit &lt;= capacity</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">mark</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> limit;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;Copy<br></code></pre></td></tr></table></figure><ul><li><strong>capacity</strong>：缓冲区的容量。通过构造函数赋予，一旦设置，无法更改</li><li><strong>limit</strong>：缓冲区的界限。位于limit 后的数据不可读写。缓冲区的限制不能为负，并且<strong>不能大于其容量</strong></li><li><strong>position</strong>：<strong>下一个</strong>读写位置的索引（类似PC）。缓冲区的位置不能为负，并且<strong>不能大于limit</strong></li><li><strong>mark</strong>：记录当前position的值。<strong>position被改变后，可以通过调用reset() 方法恢复到mark的位置。</strong></li></ul><p>以上四个属性必须满足以下要求<br><strong>mark &lt;&#x3D; position &lt;&#x3D; limit &lt;&#x3D; capacity</strong></p><h3 id="2-3-核心方法"><a href="#2-3-核心方法" class="headerlink" title="2.3 核心方法"></a>2.3 核心方法</h3><h4 id="put-方法"><a href="#put-方法" class="headerlink" title="put()方法"></a>put()方法<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#put-%E6%96%B9%E6%B3%95"></a></h4><ul><li>put()方法可以将一个数据放入到缓冲区中。</li><li>进行该操作后，postition的值会+1，指向下一个可以放入的位置。capacity &#x3D; limit ，为缓冲区容量的值。</li></ul><p><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26a1a6ee0e304eeaa3886e0309cc7f53~tplv-k3u1fbpfcp-zoom-1.image"></a><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201109145709.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d44da2501bb2445ea3c6ea69cf4dca59~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></a></p><h4 id="flip-方法"><a href="#flip-方法" class="headerlink" title="flip()方法"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#flip-%E6%96%B9%E6%B3%95" title="flip()方法"></a>flip()方法<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#flip-%E6%96%B9%E6%B3%95"></a></h4><ul><li><p>flip()方法会<strong>切换对缓冲区的操作模式</strong>，由写-&gt;读 &#x2F; 读-&gt;写</p></li><li><p>进行该操作后</p><ul><li>如果是写模式-&gt;读模式，position &#x3D; 0 ， limit 指向最后一个元素的下一个位置，capacity不变</li><li>如果是读-&gt;写，则恢复为put()方法中的值</li></ul></li></ul><p><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8049578775f419e9127e6d4e0173109~tplv-k3u1fbpfcp-zoom-1.image"></a><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201109145753.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e027706f70e4c2aa3ee1419f1411f01~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></a></p><h4 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#get-%E6%96%B9%E6%B3%95" title="get()方法"></a>get()方法<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#get-%E6%96%B9%E6%B3%95"></a></h4><ul><li>get()方法会读取缓冲区中的一个值</li><li>进行该操作后，position会+1，如果超过了limit则会抛出异常</li><li><strong>注意：get(i)方法不会改变position的值</strong></li></ul><p><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f4efa4e4865442ab9bd39c152742705~tplv-k3u1fbpfcp-zoom-1.image"></a><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201109145822.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ff0f0e912474961bfc179987b546568~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></a></p><h4 id="rewind-方法"><a href="#rewind-方法" class="headerlink" title="rewind()方法"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#rewind-%E6%96%B9%E6%B3%95" title="rewind()方法"></a>rewind()方法<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#rewind-%E6%96%B9%E6%B3%95"></a></h4><ul><li>该方法<strong>只能在读模式下使用</strong></li><li>rewind()方法后，会恢复position、limit和capacity的值，变为进行get()前的值</li></ul><p><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72072c84f6c2400cbea81eeddec126d3~tplv-k3u1fbpfcp-zoom-1.image"></a><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201109145852.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e99870102d89422f830d84560bc4ad81~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></a></p><h4 id="clean-方法"><a href="#clean-方法" class="headerlink" title="clean()方法"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#clean-%E6%96%B9%E6%B3%95" title="clean()方法"></a>clean()方法<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#clean-%E6%96%B9%E6%B3%95"></a></h4><ul><li>clean()方法会将缓冲区中的各个属性恢复为最初的状态，position &#x3D; 0, capacity &#x3D; limit</li><li><strong>此时缓冲区的数据依然存在</strong>，处于“被遗忘”状态，下次进行写操作时会覆盖这些数据</li></ul><p><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b680896cf3744f8b52f041e5522039a~tplv-k3u1fbpfcp-zoom-1.image"></a><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201109145905.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e999bcbd7f24a329e05798e979927bc~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></a></p><h4 id="mark-和reset-方法"><a href="#mark-和reset-方法" class="headerlink" title="mark()和reset()方法"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#mark-%E5%92%8Creset-%E6%96%B9%E6%B3%95" title="mark()和reset()方法"></a>mark()和reset()方法<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#mark-%E5%92%8Creset-%E6%96%B9%E6%B3%95"></a></h4><ul><li>mark()方法会将postion的值保存到mark属性中</li><li>reset()方法会将position的值改为mark中保存的值</li></ul><h4 id="compact-方法"><a href="#compact-方法" class="headerlink" title="compact()方法"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#compact-%E6%96%B9%E6%B3%95" title="compact()方法"></a>compact()方法<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#compact-%E6%96%B9%E6%B3%95"></a></h4><p><strong>此方法为ByteBuffer的方法，而不是Buffer的方法</strong></p><ul><li>compact会把未读完的数据向前压缩，然后切换到写模式</li><li>数据前移后，原位置的值并未清零，写时会<strong>覆盖</strong>之前的值</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210412155726.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b02b7fd679764720aff715da78881ac8~tplv-k3u1fbpfcp-zoom-1.image"></a></p><h4 id="clear-VS-compact"><a href="#clear-VS-compact" class="headerlink" title="clear() VS compact()"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#clear-VS-compact" title="clear() VS compact()"></a>clear() VS compact()<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#clear-VS-compact"></a></h4><p>clear只是对position、limit、mark进行重置，而compact在对position进行设置，以及limit、mark进行重置的同时，还涉及到数据在内存中拷贝（会调用arraycopy）。<strong>所以compact比clear更耗性能。</strong> 但compact能保存你未读取的数据，将新数据追加到为读取的数据之后；而clear则不行，若你调用了clear，则未读取的数据就无法再读取到了</p><h4 id="开辟buffer空间的两种方式-allocate-amp-allocateDirect"><a href="#开辟buffer空间的两种方式-allocate-amp-allocateDirect" class="headerlink" title="开辟buffer空间的两种方式(allocate &amp; allocateDirect)"></a><strong>开辟buffer空间的两种方式(allocate &amp; allocateDirect)</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//allocate方法开辟的是堆内存空间，读写效率低，同时收到垃圾回收的影响</span><br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">allocate</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br><span class="hljs-comment">//allocateDirect方法开辟的是直接内存，读写效率高，分配效率低，可能会造成内存泄漏</span><br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">byteBuffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocateDirect(<span class="hljs-number">16</span>);<br></code></pre></td></tr></table></figure><h3 id="2-4-核心方法测试"><a href="#2-4-核心方法测试" class="headerlink" title="2.4 核心方法测试"></a>2.4 核心方法测试</h3><h4 id="工具类-ByteBufferUtil"><a href="#工具类-ByteBufferUtil" class="headerlink" title="工具类 ByteBufferUtil"></a>工具类 ByteBufferUtil</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ByteBufferUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] BYTE2CHAR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">256</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] HEXDUMP_TABLE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">256</span> * <span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] HEXPADDING = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">16</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] HEXDUMP_ROWPREFIXES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">65536</span> &gt;&gt;&gt; <span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] BYTE2HEX = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">256</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] BYTEPADDING = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">16</span>];<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] DIGITS = <span class="hljs-string">&quot;0123456789abcdef&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br>            HEXDUMP_TABLE[i &lt;&lt; <span class="hljs-number">1</span>] = DIGITS[i &gt;&gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">0x0F</span>];<br>            HEXDUMP_TABLE[(i &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>] = DIGITS[i &amp; <span class="hljs-number">0x0F</span>];<br>        &#125;<br><br>        <span class="hljs-type">int</span> i;<br><br>        <span class="hljs-comment">// Generate the lookup table for hex dump paddings</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; HEXPADDING.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">padding</span> <span class="hljs-operator">=</span> HEXPADDING.length - i;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(padding * <span class="hljs-number">3</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; padding; j++) &#123;<br>                buf.append(<span class="hljs-string">&quot;   &quot;</span>);<br>            &#125;<br>            HEXPADDING[i] = buf.toString();<br>        &#125;<br><br>        <span class="hljs-comment">// Generate the lookup table for the start-offset header in each row (up to 64KiB).</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; HEXDUMP_ROWPREFIXES.length; i++) &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-number">12</span>);<br>            buf.append(StringUtil.NEWLINE);<br>            buf.append(Long.toHexString(i &lt;&lt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">0xFFFFFFFFL</span> | <span class="hljs-number">0x100000000L</span>));<br>            buf.setCharAt(buf.length() - <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;|&#x27;</span>);<br>            buf.append(<span class="hljs-string">&#x27;|&#x27;</span>);<br>            HEXDUMP_ROWPREFIXES[i] = buf.toString();<br>        &#125;<br><br>        <span class="hljs-comment">// Generate the lookup table for byte-to-hex-dump conversion</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; BYTE2HEX.length; i++) &#123;<br>            BYTE2HEX[i] = <span class="hljs-string">&#x27; &#x27;</span> + StringUtil.byteToHexStringPadded(i);<br>        &#125;<br><br>        <span class="hljs-comment">// Generate the lookup table for byte dump paddings</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; BYTEPADDING.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">padding</span> <span class="hljs-operator">=</span> BYTEPADDING.length - i;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(padding);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; padding; j++) &#123;<br>                buf.append(<span class="hljs-string">&#x27; &#x27;</span>);<br>            &#125;<br>            BYTEPADDING[i] = buf.toString();<br>        &#125;<br><br>        <span class="hljs-comment">// Generate the lookup table for byte-to-char conversion</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; BYTE2CHAR.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &lt;= <span class="hljs-number">0x1f</span> || i &gt;= <span class="hljs-number">0x7f</span>) &#123;<br>                BYTE2CHAR[i] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                BYTE2CHAR[i] = (<span class="hljs-type">char</span>) i;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打印所有内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> buffer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">debugAll</span><span class="hljs-params">(ByteBuffer buffer)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldlimit</span> <span class="hljs-operator">=</span> buffer.limit();<br>        buffer.limit(buffer.capacity());<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">origin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-number">256</span>);<br>        appendPrettyHexDump(origin, buffer, <span class="hljs-number">0</span>, buffer.capacity());<br>        System.out.println(<span class="hljs-string">&quot;+--------+-------------------- all ------------------------+----------------+&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;position: [%d], limit: [%d]\n&quot;</span>, buffer.position(), oldlimit);<br>        System.out.println(origin);<br>        buffer.limit(oldlimit);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打印可读取内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> buffer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">debugRead</span><span class="hljs-params">(ByteBuffer buffer)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-number">256</span>);<br>        appendPrettyHexDump(builder, buffer, buffer.position(), buffer.limit() - buffer.position());<br>        System.out.println(<span class="hljs-string">&quot;+--------+-------------------- read -----------------------+----------------+&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;position: [%d], limit: [%d]\n&quot;</span>, buffer.position(), buffer.limit());<br>        System.out.println(builder);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendPrettyHexDump</span><span class="hljs-params">(StringBuilder dump, ByteBuffer buf, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-keyword">if</span> (MathUtil.isOutOfBounds(offset, length, buf.capacity())) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>(<br>                    <span class="hljs-string">&quot;expected: &quot;</span> + <span class="hljs-string">&quot;0 &lt;= offset(&quot;</span> + offset + <span class="hljs-string">&quot;) &lt;= offset + length(&quot;</span> + length<br>                            + <span class="hljs-string">&quot;) &lt;= &quot;</span> + <span class="hljs-string">&quot;buf.capacity(&quot;</span> + buf.capacity() + <span class="hljs-string">&#x27;)&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        dump.append(<br>                <span class="hljs-string">&quot;         +-------------------------------------------------+&quot;</span> +<br>                        StringUtil.NEWLINE + <span class="hljs-string">&quot;         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |&quot;</span> +<br>                        StringUtil.NEWLINE + <span class="hljs-string">&quot;+--------+-------------------------------------------------+----------------+&quot;</span>);<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">startIndex</span> <span class="hljs-operator">=</span> offset;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">fullRows</span> <span class="hljs-operator">=</span> length &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">remainder</span> <span class="hljs-operator">=</span> length &amp; <span class="hljs-number">0xF</span>;<br><br>        <span class="hljs-comment">// Dump the rows which have 16 bytes.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; row &lt; fullRows; row++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">rowStartIndex</span> <span class="hljs-operator">=</span> (row &lt;&lt; <span class="hljs-number">4</span>) + startIndex;<br><br>            <span class="hljs-comment">// Per-row prefix.</span><br>            appendHexDumpRowPrefix(dump, row, rowStartIndex);<br><br>            <span class="hljs-comment">// Hex dump</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">rowEndIndex</span> <span class="hljs-operator">=</span> rowStartIndex + <span class="hljs-number">16</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(<span class="hljs-string">&quot; |&quot;</span>);<br><br>            <span class="hljs-comment">// ASCII dump</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(<span class="hljs-string">&#x27;|&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// Dump the last row which has less than 16 bytes.</span><br>        <span class="hljs-keyword">if</span> (remainder != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">rowStartIndex</span> <span class="hljs-operator">=</span> (fullRows &lt;&lt; <span class="hljs-number">4</span>) + startIndex;<br>            appendHexDumpRowPrefix(dump, fullRows, rowStartIndex);<br><br>            <span class="hljs-comment">// Hex dump</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">rowEndIndex</span> <span class="hljs-operator">=</span> rowStartIndex + remainder;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(HEXPADDING[remainder]);<br>            dump.append(<span class="hljs-string">&quot; |&quot;</span>);<br><br>            <span class="hljs-comment">// Ascii dump</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(BYTEPADDING[remainder]);<br>            dump.append(<span class="hljs-string">&#x27;|&#x27;</span>);<br>        &#125;<br><br>        dump.append(StringUtil.NEWLINE +<br>                <span class="hljs-string">&quot;+--------+-------------------------------------------------+----------------+&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendHexDumpRowPrefix</span><span class="hljs-params">(StringBuilder dump, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> rowStartIndex)</span> &#123;<br>        <span class="hljs-keyword">if</span> (row &lt; HEXDUMP_ROWPREFIXES.length) &#123;<br>            dump.append(HEXDUMP_ROWPREFIXES[row]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            dump.append(StringUtil.NEWLINE);<br>            dump.append(Long.toHexString(rowStartIndex &amp; <span class="hljs-number">0xFFFFFFFFL</span> | <span class="hljs-number">0x100000000L</span>));<br>            dump.setCharAt(dump.length() - <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;|&#x27;</span>);<br>            dump.append(<span class="hljs-string">&#x27;|&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">short</span> <span class="hljs-title function_">getUnsignedByte</span><span class="hljs-params">(ByteBuffer buffer, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">short</span>) (buffer.get(index) &amp; <span class="hljs-number">0xFF</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TestBufferReadWrite"><a href="#TestBufferReadWrite" class="headerlink" title="TestBufferReadWrite"></a>TestBufferReadWrite</h4><p>用于观察数据写入和读取后的缓冲区状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBufferReadWrite</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// 向buffer中写入1个字节的数据</span><br>        buffer.put((<span class="hljs-type">byte</span>)<span class="hljs-number">97</span>);<br>        <span class="hljs-comment">// 使用工具类，查看buffer状态</span><br>        System.out.println(<span class="hljs-string">&quot;Put one element&quot;</span>);<br>        ByteBufferUtil.debugAll(buffer);<br><br>        System.out.println();<br>        <span class="hljs-comment">// 向buffer中写入4个字节的数据</span><br>        buffer.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">98</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>&#125;);<br>        System.out.println(<span class="hljs-string">&quot;Put four element&quot;</span>);<br>        ByteBufferUtil.debugAll(buffer);<br>        System.out.println();<br><br>        <span class="hljs-comment">// 获取数据</span><br>        buffer.flip();<br>        System.out.println(<span class="hljs-string">&quot;before get&quot;</span>);<br>        ByteBufferUtil.debugAll(buffer);<br>        System.out.println();<br><br>        System.out.println(buffer.get());<br>        System.out.println(buffer.get());<br>        System.out.println(<span class="hljs-string">&quot;after get twice&quot;</span>);<br>        ByteBufferUtil.debugAll(buffer);<br>        System.out.println();<br>        <span class="hljs-comment">// 使用compact切换模式</span><br>        buffer.compact();<br>        System.out.println(<span class="hljs-string">&quot;after compact&quot;</span>);<br>        ByteBufferUtil.debugAll(buffer);<br>        System.out.println();<br>        <span class="hljs-comment">// 再次写入</span><br>        buffer.put((<span class="hljs-type">byte</span>)<span class="hljs-number">102</span>);<br>        buffer.put((<span class="hljs-type">byte</span>)<span class="hljs-number">103</span>);<br>        System.out.println(<span class="hljs-string">&quot;after put double element again&quot;</span>);<br>        ByteBufferUtil.debugAll(buffer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串与ByteBuffer的相互转换"><a href="#字符串与ByteBuffer的相互转换" class="headerlink" title="字符串与ByteBuffer的相互转换"></a><strong>字符串与ByteBuffer的相互转换</strong><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8EByteBuffer%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2"></a></h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E6%96%B9%E6%B3%95%E4%B8%80" title="方法一"></a>方法一<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E6%96%B9%E6%B3%95%E4%B8%80"></a></h4><p><strong>编码</strong>：字符串调用getByte方法获得byte数组，将byte数组放入ByteBuffer中</p><p><strong>解码</strong>：<strong>先调用ByteBuffer的flip方法，然后通过StandardCharsets的decoder方法解码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTranslateString</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 准备两个字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer1</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br>        <span class="hljs-comment">// 通过字符串的getByte方法获得字节数组，放入缓冲区中</span><br>        buffer1.put(str1.getBytes());<br>        ByteBufferUtil.debugAll(buffer1);<br><br>        <span class="hljs-comment">// 将缓冲区中的数据转化为字符串</span><br>        <span class="hljs-comment">// 切换模式</span><br>        buffer1.flip();<br>        <br>        <span class="hljs-comment">// 通过StandardCharsets解码，获得CharBuffer，再通过toString获得字符串</span><br>        str2 = StandardCharsets.UTF_8.decode(buffer1).toString();<br>        System.out.println(str2);<br>        ByteBufferUtil.debugAll(buffer1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">+--------+-------------------- all ------------------------+----------------+<br>position: [<span class="hljs-number">5</span>], limit: [<span class="hljs-number">16</span>]<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">68</span> <span class="hljs-number">65</span> 6c 6c <span class="hljs-number">6f</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> |hello...........|<br>+--------+-------------------------------------------------+----------------+<br>hello<br>+--------+-------------------- all ------------------------+----------------+<br>position: [<span class="hljs-number">5</span>], limit: [<span class="hljs-number">5</span>]<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">68</span> <span class="hljs-number">65</span> 6c 6c <span class="hljs-number">6f</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> |hello...........|<br>+--------+-------------------------------------------------+----------------+Copy<br></code></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E6%96%B9%E6%B3%95%E4%BA%8C" title="方法二"></a>方法二<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E6%96%B9%E6%B3%95%E4%BA%8C"></a></h4><p><strong>编码</strong>：通过StandardCharsets的encode方法获得ByteBuffer，此时获得的ByteBuffer为读模式，无需通过flip切换模式</p><p><strong>解码</strong>：通过StandardCharsets的decoder方法解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTranslateString</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 准备两个字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-comment">// 通过StandardCharsets的encode方法获得ByteBuffer</span><br>        <span class="hljs-comment">// 此时获得的ByteBuffer为读模式，无需通过flip切换模式</span><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer1</span> <span class="hljs-operator">=</span> StandardCharsets.UTF_8.encode(str1);<br>        ByteBufferUtil.debugAll(buffer1);<br><br>        <span class="hljs-comment">// 将缓冲区中的数据转化为字符串</span><br>        <span class="hljs-comment">// 通过StandardCharsets解码，获得CharBuffer，再通过toString获得字符串</span><br>        str2 = StandardCharsets.UTF_8.decode(buffer1).toString();<br>        System.out.println(str2);<br>        ByteBufferUtil.debugAll(buffer1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">+--------+-------------------- all ------------------------+----------------+<br>position: [<span class="hljs-number">0</span>], limit: [<span class="hljs-number">5</span>]<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">68</span> <span class="hljs-number">65</span> 6c 6c <span class="hljs-number">6f</span>                                  |hello           |<br>+--------+-------------------------------------------------+----------------+<br>hello<br>+--------+-------------------- all ------------------------+----------------+<br>position: [<span class="hljs-number">5</span>], limit: [<span class="hljs-number">5</span>]<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">68</span> <span class="hljs-number">65</span> 6c 6c <span class="hljs-number">6f</span>                                  |hello           |<br>+--------+-------------------------------------------------+----------------+Copy<br></code></pre></td></tr></table></figure><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E6%96%B9%E6%B3%95%E4%B8%89" title="方法三"></a><strong>方法三</strong><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E6%96%B9%E6%B3%95%E4%B8%89"></a></h4><p><strong>编码</strong>：字符串调用getByte()方法获得字节数组，将字节数组传给<strong>ByteBuffer的wrap()方法</strong>，通过该方法获得ByteBuffer。<strong>同样无需调用flip方法切换为读模式</strong></p><p><strong>解码</strong>：通过StandardCharsets的decoder方法解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTranslateString</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 准备两个字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-comment">// 通过StandardCharsets的encode方法获得ByteBuffer</span><br>        <span class="hljs-comment">// 此时获得的ByteBuffer为读模式，无需通过flip切换模式</span><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer1</span> <span class="hljs-operator">=</span> ByteBuffer.wrap(str1.getBytes());<br>        ByteBufferUtil.debugAll(buffer1);<br><br>        <span class="hljs-comment">// 将缓冲区中的数据转化为字符串</span><br>        <span class="hljs-comment">// 通过StandardCharsets解码，获得CharBuffer，再通过toString获得字符串</span><br>        str2 = StandardCharsets.UTF_8.decode(buffer1).toString();<br>        System.out.println(str2);<br>        ByteBufferUtil.debugAll(buffer1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">+--------+-------------------- all ------------------------+----------------+<br>position: [<span class="hljs-number">0</span>], limit: [<span class="hljs-number">5</span>]<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">68</span> <span class="hljs-number">65</span> 6c 6c <span class="hljs-number">6f</span>                                  |hello           |<br>+--------+-------------------------------------------------+----------------+<br>hello<br>+--------+-------------------- all ------------------------+----------------+<br>position: [<span class="hljs-number">5</span>], limit: [<span class="hljs-number">5</span>]<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">68</span> <span class="hljs-number">65</span> 6c 6c <span class="hljs-number">6f</span>                                  |hello           |<br>+--------+-------------------------------------------------+----------------+<br></code></pre></td></tr></table></figure><h3 id="粘包与半包"><a href="#粘包与半包" class="headerlink" title="粘包与半包"></a>粘包与半包</h3><h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E7%8E%B0%E8%B1%A1"></a></h4><p>网络上有多条数据发送给服务端，数据之间使用\n进行分隔<br>但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为</p><ul><li>Hello,world\n</li><li>I’m Nyima\n</li><li>How are you?\n</li></ul><p>变成了下面的两个 byteBuffer (粘包，半包)</p><ul><li>Hello,world\nI’m Nyima\nHo</li><li>w are you?\n</li></ul><p><strong>粘包:</strong><br>两条消息被组合在一起即为粘包，一般出现的原因是因为多条消息被一起发送<br><strong>半包:</strong><br>消息被截断为半包，一般出现原因是因为接收方一次能接收的最大信息量有限，因而产生半包的现象</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95"></a></h4><ul><li><p>通过get(index)方法遍历ByteBuffer，遇到分隔符时进行处理。<strong>注意</strong>：get(index)不会改变position的值</p><ul><li>记录该段数据长度，以便于申请对应大小的缓冲区</li><li>将缓冲区的数据通过get()方法写入到target中</li></ul></li><li><p>调用<strong>compact方法</strong>切换模式，因为缓冲区中可能还有未读的数据</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestVisioPacket</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testVisioPacket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">32</span>);<br>        <span class="hljs-comment">// 模拟粘包+半包</span><br>        buffer.put(<span class="hljs-string">&quot;Hello,world\nI&#x27;m Nyima\nHo&quot;</span>.getBytes());<br>        <span class="hljs-comment">// 调用split函数处理</span><br>        split(buffer);<br>        buffer.put(<span class="hljs-string">&quot;w are you?\n&quot;</span>.getBytes());<br>        split(buffer);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">split</span><span class="hljs-params">(ByteBuffer buffer)</span> &#123;<br>        buffer.flip();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; buffer.limit(); i++) &#123;<br>            <span class="hljs-comment">//找到换行符的下标</span><br>            <span class="hljs-comment">//调用get(index)方法并不会改变position的位置</span><br>            <span class="hljs-keyword">if</span> (buffer.get(i) == <span class="hljs-string">&#x27;\n&#x27;</span>)&#123;<br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                <span class="hljs-comment">//当前换行符前的字符长度，即需要取出的缓冲区长度</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span> - buffer.position();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; length; j++) &#123;<br>                    <span class="hljs-comment">//取出buffer中的字符，get方法会使position+1</span><br>                    builder.append((<span class="hljs-type">char</span>)buffer.get());<br>                &#125;<br>                System.out.println(<span class="hljs-string">&quot;string:&quot;</span>+builder.toString());<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//调用compact，使缓冲区中未读取完的字符不会被清空</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        例如Hello,world\nI&#x27;m Nyima\nHo</span><br><span class="hljs-comment">        因为Ho后没有\n所以Ho不会被取出，compact会将Ho向前压缩，再第二次读取时就会组成How are you?\n</span><br><span class="hljs-comment">         */</span><br>        buffer.compact();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h3><ul><li><p>阻塞模式下，相关方法都会导致线程暂停</p><ul><li>ServerSocketChannel.accept 会在<strong>没有连接建立时</strong>让线程暂停</li><li>SocketChannel.read 会在<strong>通道中没有数据可读时</strong>让线程暂停</li><li>阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置</li></ul></li><li><p>单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持</p></li><li><p>但多线程下，有新的问题，体现在以下方面</p><ul><li>32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低</li><li>可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接</li></ul></li></ul><h4 id="ServiceServer"><a href="#ServiceServer" class="headerlink" title="ServiceServer"></a>ServiceServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//  使用nio</span><br><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br>        <span class="hljs-comment">// 创建服务端服务器</span><br>        <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> ServerSocketChannel.open();<br><br>        <span class="hljs-comment">// 绑定监听端口</span><br>        server.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br><br>        <span class="hljs-comment">// 客户端连接accept</span><br>        List&lt;SocketChannel&gt; channels = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;waiting for connecting&quot;</span>);<br>            <span class="hljs-comment">//用于客户端通信</span><br>            <span class="hljs-comment">//accept是阻塞方法，如果没有新的连接就会一直阻塞在此处</span><br>            channels.add(server.accept());<br><br>            System.out.println(<span class="hljs-string">&quot;client connected&quot;</span>);<br>            <span class="hljs-keyword">for</span> (SocketChannel channel : channels) &#123;<br>                System.out.println(<span class="hljs-string">&quot;before read&quot;</span>);<br>                <span class="hljs-comment">// 接受客户端数据</span><br>                channel.read(buffer);<br><br>                <span class="hljs-comment">// 切换到读模式</span><br>                buffer.flip();<br>                ByteBufferUtil.debugRead(buffer);<br><br>                System.out.println(<span class="hljs-string">&quot;after read&quot;</span>);<br>                System.out.println();<br>                <span class="hljs-comment">//切换到写模式</span><br>                buffer.clear();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ClientServer"><a href="#ClientServer" class="headerlink" title="ClientServer"></a>ClientServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 创建客户端服务器</span><br>        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> SocketChannel.open();<br><br>        <span class="hljs-comment">// 进行连接</span><br>        client.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">8080</span>));<br><br>        client.write(Charset.defaultCharset().encode(<span class="hljs-string">&quot;Hello! Im client&quot;</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h3><ul><li>可以通过ServerSocketChannel的configureBlocking(<strong>false</strong>)方法将<strong>获得连接设置为非阻塞的</strong>。此时若没有连接，accept会返回null</li><li>可以通过SocketChannel的configureBlocking(<strong>false</strong>)方法将从通道中<strong>读取数据设置为非阻塞的</strong>。若此时通道中没有数据可读，read会返回-1</li></ul><h4 id="ServiceServer-1"><a href="#ServiceServer-1" class="headerlink" title="ServiceServer"></a>ServiceServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 创建缓冲区</span><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br>        <span class="hljs-comment">// 获得服务器通道</span><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> ServerSocketChannel.open()) &#123;<br>            <span class="hljs-comment">// 为服务器通道绑定端口</span><br>            server.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>            <span class="hljs-comment">// 用户存放连接的集合</span><br>            ArrayList&lt;SocketChannel&gt; channels = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-comment">// 循环接收连接</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 设置为非阻塞模式，没有连接时返回null，不会阻塞线程</span><br>                server.configureBlocking(<span class="hljs-literal">false</span>);<br>                <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> server.accept();<br>                System.out.println(<span class="hljs-string">&quot;before connecting...&quot;</span>);<br>                <span class="hljs-comment">// 通道不为空时才将连接放入到集合中</span><br>                <span class="hljs-keyword">if</span> (socketChannel != <span class="hljs-literal">null</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;after connecting...&quot;</span>);<br>                    channels.add(socketChannel);<br>                &#125;<br>                <span class="hljs-comment">// 循环遍历集合中的连接</span><br>                <span class="hljs-keyword">for</span>(SocketChannel channel : channels) &#123;<br>                    <span class="hljs-comment">// 处理通道中的数据</span><br>                    <span class="hljs-comment">// 设置为非阻塞模式，若通道中没有数据，会返回0，不会阻塞线程</span><br>                    channel.configureBlocking(<span class="hljs-literal">false</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> channel.read(buffer);<br>                    <span class="hljs-keyword">if</span>(read &gt; <span class="hljs-number">0</span>) &#123;<br>                        buffer.flip();<br>                        ByteBufferUtil.debugRead(buffer);<br>                        buffer.clear();<br>                        System.out.println(<span class="hljs-string">&quot;after reading&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样写存在一个问题，因为设置为了非阻塞，会一直执行while(true)中的代码，CPU一直处于忙碌状态，会使得性能变低，所以实际情况中不使用这种方法处理请求</p><h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p>单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用</p><ul><li><p><strong>多路复用仅针对网络 IO</strong>，普通文件 IO <strong>无法</strong>利用多路复用</p></li><li><p>如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证</p><ul><li><p>有可连接事件时才去连接</p></li><li><p>有可读事件才去读取</p></li><li><p>有可写事件才去写入</p><ul><li>限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件</li></ul></li></ul></li></ul><h4 id="Accept事件"><a href="#Accept事件" class="headerlink" title="Accept事件"></a>Accept事件</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br>        <span class="hljs-comment">// 获得服务器通道</span><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> ServerSocketChannel.open()) &#123;<br>            server.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>            <span class="hljs-comment">// 创建选择器</span><br>            <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br><br>            <span class="hljs-comment">// 通道必须设置为非阻塞模式</span><br>            server.configureBlocking(<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">// 将通道注册到选择器中，并设置感兴趣的事件</span><br>            server.register(selector, SelectionKey.OP_ACCEPT);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 若没有事件就绪，线程会被阻塞，反之不会被阻塞。从而避免了CPU空转</span><br>                <span class="hljs-comment">// 返回值为就绪的事件个数</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">ready</span> <span class="hljs-operator">=</span> selector.select();<br>                System.out.println(<span class="hljs-string">&quot;selector ready counts : &quot;</span> + ready);<br><br>                <span class="hljs-comment">// 获取所有事件</span><br>                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<br><br>                <span class="hljs-comment">// 使用迭代器遍历事件</span><br>                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>                <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iterator.next();<br><br>                    <span class="hljs-comment">// 判断key的类型</span><br>                    <span class="hljs-keyword">if</span>(key.isAcceptable()) &#123;<br>                        <span class="hljs-comment">// 获得key对应的channel</span><br>                        <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> (ServerSocketChannel) key.channel();<br>                        System.out.println(<span class="hljs-string">&quot;before accepting...&quot;</span>);<br><br>                        <span class="hljs-comment">// 获取连接并处理，而且是必须处理，否则需要取消</span><br>                        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> channel.accept();<br>                        System.out.println(<span class="hljs-string">&quot;after accepting...&quot;</span>);<br><br>                        <span class="hljs-comment">// 处理完毕后移除</span><br>                        iterator.remove();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>步骤解析</strong></p><ul><li>获得选择器Selector</li></ul><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">Selector</span> <span class="hljs-keyword">selector</span> = <span class="hljs-keyword">Selector</span>.open()<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><ul><li><p>将<strong>通道设置为非阻塞模式</strong>，并注册到选择器中，并设置感兴趣的事件</p><ul><li><p>channel 必须工作在非阻塞模式</p></li><li><p>FileChannel 没有非阻塞模式，因此不能配合 selector 一起使用</p></li><li><p>绑定的<strong>事件类型</strong>可以有</p><ul><li>connect - 客户端连接成功时触发</li><li>accept - 服务器端成功接受连接时触发</li><li>read - 数据可读入时触发，有因为接收能力弱，数据暂不能读入的情况</li><li>write - 数据可写出时触发，有因为发送能力弱，数据暂不能写出的情况</li></ul></li></ul></li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">// 通道必须设置为非阻塞模式</span><br><span class="hljs-keyword">server</span>.configureBlocking(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 将通道注册到选择器中，并设置感兴趣的事件</span><br><span class="hljs-keyword">server</span>.register(selector, SelectionKey.OP_ACCEPT);<br></code></pre></td></tr></table></figure><ul><li><p>通过Selector监听事件，并获得就绪的通道个数，若没有通道就绪，线程会被阻塞</p><ul><li><p>阻塞直到绑定事件发生</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span> = selector.<span class="hljs-keyword">select</span>();<br></code></pre></td></tr></table></figure></li><li><p>阻塞直到绑定事件发生，<strong>或是超时</strong>（时间单位为 ms）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.select(<span class="hljs-type">long</span> timeout);<br></code></pre></td></tr></table></figure></li><li><p><strong>不会阻塞</strong>，也就是不管有没有事件，立刻返回，自己根据返回值检查是否有事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.selectNow();<br></code></pre></td></tr></table></figure></li></ul></li><li><p>获取就绪事件并<strong>得到对应的通道</strong>，然后进行处理</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取所有事件</span><br>Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<br>                <br><span class="hljs-comment">// 使用迭代器遍历事件</span><br>Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br><br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br><span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iterator.next();<br>                    <br><span class="hljs-comment">// 判断key的类型，此处为Accept类型</span><br><span class="hljs-keyword">if</span>(key.isAcceptable()) &#123;<br>        <span class="hljs-comment">// 获得key对应的channel</span><br>        <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> (ServerSocketChannel) key.channel();<br><br>        <span class="hljs-comment">// 获取连接并处理，而且是必须处理，否则需要取消</span><br>        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> channel.accept();<br><br>        <span class="hljs-comment">// 处理完毕后移除</span><br>        iterator.remove();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>事件发生后能否不处理</strong></p><p>事件发生后，<strong>要么处理，要么取消（cancel）</strong> ，不能什么都不做，<strong>否则下次该事件仍会触发</strong>，这是因为 nio 底层使用的是水平触发</p><h4 id="Read事件"><a href="#Read事件" class="headerlink" title="Read事件"></a>Read事件</h4><ul><li>在Accept事件中，若有客户端与服务器端建立了连接，<strong>需要将其对应的SocketChannel设置为非阻塞，并注册到选择其中</strong></li><li>添加Read事件，触发后进行读取操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br>        <span class="hljs-comment">// 获得服务器通道</span><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> ServerSocketChannel.open()) &#123;<br>            server.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>            <span class="hljs-comment">// 创建选择器</span><br>            <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br>            <span class="hljs-comment">// 通道必须设置为非阻塞模式</span><br>            server.configureBlocking(<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">// 将通道注册到选择器中，并设置感兴趣的实践</span><br>            server.register(selector, SelectionKey.OP_ACCEPT);<br>            <span class="hljs-comment">// 为serverKey设置感兴趣的事件</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 若没有事件就绪，线程会被阻塞，反之不会被阻塞。从而避免了CPU空转</span><br>                <span class="hljs-comment">// 返回值为就绪的事件个数</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">ready</span> <span class="hljs-operator">=</span> selector.select();<br>                System.out.println(<span class="hljs-string">&quot;selector ready counts : &quot;</span> + ready);<br>                <span class="hljs-comment">// 获取所有事件</span><br>                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<br>                <span class="hljs-comment">// 使用迭代器遍历事件</span><br>                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>                <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iterator.next();<br>                    <span class="hljs-comment">// 判断key的类型</span><br>                    <span class="hljs-keyword">if</span>(key.isAcceptable()) &#123;<br>                        <span class="hljs-comment">// 获得key对应的channel</span><br>                        <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> (ServerSocketChannel) key.channel();<br>                        System.out.println(<span class="hljs-string">&quot;before accepting...&quot;</span>);<br>                        <span class="hljs-comment">// 获取连接</span><br>                        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> channel.accept();<br>                        System.out.println(<span class="hljs-string">&quot;after accepting...&quot;</span>);<br>                        <span class="hljs-comment">// 设置为非阻塞模式，同时将连接的通道也注册到选择其中</span><br>                        socketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>                        socketChannel.register(selector, SelectionKey.OP_READ);<br>                        <span class="hljs-comment">// 处理完毕后移除</span><br>                        iterator.remove();<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isReadable()) &#123;<br>                        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> (SocketChannel) key.channel();<br>                        System.out.println(<span class="hljs-string">&quot;before reading...&quot;</span>);<br>                        channel.read(buffer);<br>                        System.out.println(<span class="hljs-string">&quot;after reading...&quot;</span>);<br>                        buffer.flip();<br>                        ByteBufferUtil.debugRead(buffer);<br>                        buffer.clear();<br>                        <span class="hljs-comment">// 处理完毕后移除</span><br>                        iterator.remove();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>当处理完一个事件后，一定要调用迭代器的remove方法移除对应事件，否则会出现错误</strong>。原因如下</p><p>以我们上面的 <strong>Read事件</strong> 的代码为例</p><ul><li><p>当调用了 server.register(selector, SelectionKey.OP_ACCEPT)后，Selector中维护了一个集合，<strong>用于存放SelectionKey以及其对应的通道</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// WindowsSelectorImpl 中的 SelectionKeyImpl数组</span><br><span class="hljs-keyword">private</span> SelectionKeyImpl[] channelArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SelectionKeyImpl</span>[<span class="hljs-number">8</span>];Copy<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectionKeyImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSelectionKey</span> &#123;<br>    <span class="hljs-comment">// Key对应的通道</span><br>    <span class="hljs-keyword">final</span> SelChImpl channel;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210414192429.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70ae74562fbb4b318eb52f510b0b801b~tplv-k3u1fbpfcp-zoom-1.image"></a></p></li><li><p>当<strong>选择器中的通道对应的事件发生后</strong>，selecionKey会被放到另一个集合中，但是<strong>selecionKey不会自动移除</strong>，所以需要我们在处理完一个事件后，通过迭代器手动移除其中的selecionKey。否则会导致已被处理过的事件再次被处理，就会引发错误<a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210414193143.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5179898ec9c64325a74e0a72e1681da2~tplv-k3u1fbpfcp-zoom-1.image"></a></p></li></ul><h2 id="NIO-BIO"><a href="#NIO-BIO" class="headerlink" title="NIO BIO"></a>NIO BIO</h2><h2 id="Stream与Channel"><a href="#Stream与Channel" class="headerlink" title="Stream与Channel"></a>Stream与Channel<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#1%E3%80%81Stream%E4%B8%8EChannel"></a></h2><ul><li>stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）</li><li>stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，<strong>网络 channel 可配合 selector 实现多路复用</strong></li><li>二者<strong>均为全双工</strong>，即读写可以同时进行<ul><li>虽然Stream是单向流动的，但是它也是全双工的</li></ul></li></ul><h2 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#2%E3%80%81IO%E6%A8%A1%E5%9E%8B"></a></h2><ul><li><p><strong>同步</strong>：线程自己去获取结果（一个线程）</p><ul><li>例如：线程调用一个方法后，需要等待方法返回结果</li></ul></li><li><p><strong>异步</strong>：线程自己不去获取结果，而是由其它线程返回结果（至少两个线程）</p><ul><li>例如：线程A调用一个方法后，继续向下运行，运行结果由线程B返回</li></ul></li></ul><p>当调用一次 channel.<strong>read</strong> 或 stream.<strong>read</strong> 后，会由用户态切换至操作系统内核态来完成真正数据读取，而读取又分为两个阶段，分别为：</p><ul><li><p>等待数据阶段</p></li><li><p>复制数据阶段</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418151243.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c022c78f4174fcaaba370ce0e105648~tplv-k3u1fbpfcp-zoom-1.image"></a></p></li></ul><p>根据UNIX 网络编程 - 卷 I，IO模型主要有以下几种</p><h3 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E9%98%BB%E5%A1%9EIO" title="阻塞IO"></a>阻塞IO<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E9%98%BB%E5%A1%9EIO"></a></h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418151605.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbcfe71a0a484b39a88cef503b439d46~tplv-k3u1fbpfcp-zoom-1.image"></a></p><ul><li>用户线程进行read操作时，<strong>需要等待操作系统执行实际的read操作</strong>，此期间用户线程是被阻塞的，无法执行其他操作</li></ul><h3 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E9%9D%9E%E9%98%BB%E5%A1%9EIO" title="非阻塞IO"></a>非阻塞IO<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E9%9D%9E%E9%98%BB%E5%A1%9EIO"></a></h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418152137.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c772b7242c54afba56f1568f5505a08~tplv-k3u1fbpfcp-zoom-1.image"></a></p><ul><li><p>用户线程<strong>在一个循环中一直调用read方法</strong>，若内核空间中还没有数据可读，立即返回</p><ul><li><strong>只是在等待阶段非阻塞</strong></li></ul></li><li><p>用户线程发现内核空间中有数据后，等待内核空间执行复制数据，待复制结束后返回结果</p></li></ul><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8-1" title="多路复用"></a>多路复用<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8-1"></a></h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418154208.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/270cdcfcad3e4c49b9ca894b3b4092fe~tplv-k3u1fbpfcp-zoom-1.image"></a></p><p><strong>Java中通过Selector实现多路复用</strong></p><ul><li>当没有事件是，调用select方法会被阻塞住</li><li>一旦有一个或多个事件发生后，就会处理对应的事件，从而实现多路复用</li></ul><p><strong>多路复用与阻塞IO的区别</strong></p><ul><li>阻塞IO模式下，<strong>若线程因accept事件被阻塞，发生read事件后，仍需等待accept事件执行完成后</strong>，才能去处理read事件</li><li>多路复用模式下，一个事件发生后，若另一个事件处于阻塞状态，不会影响该事件的执行</li></ul><h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E5%BC%82%E6%AD%A5IO" title="异步IO"></a>异步IO<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E5%BC%82%E6%AD%A5IO"></a></h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418160106.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f783ddb84b94a5591e0786fb8d83b4d~tplv-k3u1fbpfcp-zoom-1.image"></a></p><ul><li>线程1调用方法后理解返回，<strong>不会被阻塞也不需要立即获取结果</strong></li><li>当方法的运行结果出来以后，由线程2将结果返回给线程1</li></ul><h2 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#3%E3%80%81%E9%9B%B6%E6%8B%B7%E8%B4%9D" title="3、零拷贝"></a>零拷贝<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#3%E3%80%81%E9%9B%B6%E6%8B%B7%E8%B4%9D"></a></h2><p><strong>零拷贝指的是数据无需拷贝到 JVM 内存中</strong>，同时具有以下三个优点</p><ul><li>更少的用户态与内核态的切换</li><li>不利用 cpu 计算，减少 cpu 缓存伪共享</li><li>零拷贝适合小文件传输</li></ul><h3 id="传统-IO-问题"><a href="#传统-IO-问题" class="headerlink" title="传统 IO 问题"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E4%BC%A0%E7%BB%9F-IO-%E9%97%AE%E9%A2%98" title="传统 IO 问题"></a>传统 IO 问题<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E4%BC%A0%E7%BB%9F-IO-%E9%97%AE%E9%A2%98"></a></h3><p>传统的 IO 将一个文件通过 socket 写出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;helloword/data.txt&quot;</span>);<br><span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(file, <span class="hljs-string">&quot;r&quot;</span>);<br><br><span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)f.length()];<br>file.read(buf);<br><br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ...;<br>socket.getOutputStream().write(buf);Copy<br></code></pre></td></tr></table></figure><p><strong>内部工作流如下</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162306.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9d5b85a8c10475d8fe9cbfb1822c44e~tplv-k3u1fbpfcp-zoom-1.image"></a></p><ul><li><p>Java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 Java 程序的<strong>用户态切换至内核态</strong>，去调用操作系统（Kernel）的读能力，将数据读入<strong>内核缓冲区</strong>。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 CPU</p><p><code>DMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO</code></p></li><li><p>从<strong>内核态</strong>切换回<strong>用户态</strong>，将数据从<strong>内核缓冲区</strong>读入<strong>用户缓冲区</strong>（即 byte[] buf），这期间 <strong>CPU 会参与拷贝</strong>，无法利用 DMA</p></li><li><p>调用 write 方法，这时将数据从<strong>用户缓冲区</strong>（byte[] buf）写入 <strong>socket 缓冲区，CPU 会参与拷贝</strong></p></li><li><p>接下来要向网卡写数据，这项能力 Java 又不具备，因此又得从<strong>用户态</strong>切换至<strong>内核态</strong>，调用操作系统的写能力，使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 CPU</p></li></ul><p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p><ul><li>用户态与内核态的切换发生了 3 次，这个操作比较重量级</li><li>数据拷贝了共 4 次</li></ul><h3 id="NIO-优化"><a href="#NIO-优化" class="headerlink" title="NIO 优化"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#NIO-%E4%BC%98%E5%8C%96" title="NIO 优化"></a>NIO 优化<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#NIO-%E4%BC%98%E5%8C%96"></a></h3><p>通过 <strong>DirectByteBuf</strong></p><ul><li><p>ByteBuffer.allocate(10)</p><ul><li>底层对应 HeapByteBuffer，使用的还是 Java 内存</li></ul></li><li><p>ByteBuffer.<strong>allocateDirect</strong>(10)</p><ul><li>底层对应DirectByteBuffer，<strong>使用的是操作系统内存</strong></li></ul></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162410.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57a5e9aeb2bb46b781b4e81b11c431a0~tplv-k3u1fbpfcp-zoom-1.image"></a></p><p>大部分步骤与优化前相同，唯有一点：<strong>Java 可以使用 DirectByteBuffer 将堆外内存映射到 JVM 内存中来直接访问使用</strong></p><ul><li><p>这块内存不受 JVM 垃圾回收的影响，因此内存地址固定，有助于 IO 读写</p></li><li><p>Java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步</p><ul><li><p>DirectByteBuffer 对象被垃圾回收，将虚引用加入引用队列</p><ul><li>当引用的对象ByteBuffer被垃圾回收以后，虚引用对象Cleaner就会被放入引用队列中，然后调用Cleaner的clean方法来释放直接内存</li><li>DirectByteBuffer 的释放底层调用的是 Unsafe 的 freeMemory 方法</li></ul></li><li><p>通过专门线程访问引用队列，根据虚引用释放堆外内存</p></li></ul></li><li><p><strong>减少了一次数据拷贝，用户态与内核态的切换次数没有减少</strong></p></li></ul><h3 id="进一步优化1"><a href="#进一步优化1" class="headerlink" title="进一步优化1"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E8%BF%9B%E4%B8%80%E6%AD%A5%E4%BC%98%E5%8C%961" title="进一步优化1"></a>进一步优化1<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E8%BF%9B%E4%B8%80%E6%AD%A5%E4%BC%98%E5%8C%961"></a></h3><p><strong>以下两种方式都是零拷贝</strong>，即无需将数据拷贝到用户缓冲区中（JVM内存中）</p><p>底层采用了 <strong>linux 2.1</strong> 后提供的 <strong>sendFile</strong> 方法，Java 中对应着两个 channel 调用 <strong>transferTo&#x2F;transferFrom</strong> 方法拷贝数据</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162750.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dbf572cef10749c9b36859d3b7c5eeee~tplv-k3u1fbpfcp-zoom-1.image"></a></p><ul><li>Java 调用 transferTo 方法后，要从 Java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 CPU</li><li>数据从<strong>内核缓冲区</strong>传输到 <strong>socket 缓冲区</strong>，CPU 会参与拷贝</li><li>最后使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 CPU</li></ul><p>这种方法下</p><ul><li>只发生了1次用户态与内核态的切换</li><li>数据拷贝了 3 次</li></ul><h3 id="进一步优化2"><a href="#进一步优化2" class="headerlink" title="进一步优化2"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E8%BF%9B%E4%B8%80%E6%AD%A5%E4%BC%98%E5%8C%962" title="进一步优化2"></a>进一步优化2<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#%E8%BF%9B%E4%B8%80%E6%AD%A5%E4%BC%98%E5%8C%962"></a></h3><p><strong>linux 2.4</strong> 对上述方法再次进行了优化</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418163033.png"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2ada3cf2710433dbebf60630666fa8e~tplv-k3u1fbpfcp-zoom-1.image"></a></p><ul><li>Java 调用 transferTo 方法后，要从 Java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 CPU</li><li>只会将一些 offset 和 length 信息拷入 <strong>socket 缓冲区</strong>，几乎无消耗</li><li>使用 DMA 将 <strong>内核缓冲区</strong>的数据写入网卡，不会使用 CPU</li></ul><p><strong>整个过程仅只发生了1次用户态与内核态的切换，数据拷贝了 2 次</strong></p><h2 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#4%E3%80%81AIO" title="4、AIO"></a>AIO<a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/#4%E3%80%81AIO"></a></h2><p>AIO 用来解决数据复制阶段的阻塞问题</p><ul><li>同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置</li><li>异步意味着，在进行读写操作时，线程不必等待结果，而是将来由操作系统来通过回调方式由另外的线程来获得结果</li></ul><blockquote><p>异步模型需要底层操作系统（Kernel）提供支持</p><ul><li>Windows 系统通过 IOCP <strong>实现了真正的异步 IO</strong></li><li>Linux 系统异步 IO 在 2.6 版本引入，但其<strong>底层实现还是用多路复用模拟了异步 IO，性能没有优势</strong></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java网络编程</category>
      
      <category>Nio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nio</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
